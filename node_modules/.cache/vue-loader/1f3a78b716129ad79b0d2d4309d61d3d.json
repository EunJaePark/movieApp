{"remainingRequest":"/Users/eunjae/Desktop/github/movieApp/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/eunjae/Desktop/github/movieApp/src/components/MovieConts.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/eunjae/Desktop/github/movieApp/src/components/MovieConts.vue","mtime":1590846839717},{"path":"/Users/eunjae/Desktop/github/movieApp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eunjae/Desktop/github/movieApp/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/eunjae/Desktop/github/movieApp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eunjae/Desktop/github/movieApp/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IGV2ZW50YnVzIH0gZnJvbSAnLi4vbWFpbic7CgpleHBvcnQgZGVmYXVsdCB7CiAgICBjb21wdXRlZDogewogICAgICAgIG1vdmllZGF0YSgpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLm1vdmllZGF0YTsKICAgICAgICB9LAogICAgICAgIC8vIGRhdGFJbk1vdmllZGF0YSgpIHsKICAgICAgICAvLyAgICAgcmV0dXJuIHRoaXMubW92aWVkYXRhLkRhdGE7CiAgICAgICAgLy8gfSwKICAgICAgICBtb3ZpZVJlc3VsdCgpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLnJlc3VsdDsKICAgICAgICB9LAogICAgfSwKICAgIGNyZWF0ZWQoKSB7CiAgICAgICAgLy8g7J2067Kk7Yq467KE7Iqk66GcIG1haW5Db250c+yXkOyEnCDsnoXroKXtlZwg6rKA7IOJ7Ja0IOu2iOufrOyYtC4KICAgICAgICBjb25zb2xlLmxvZygn7J2067Kk7Yq467KE7IqkIOydtOyaqe2VtOyEnCBtb3ZpZe2OmOydtOyngOyXkOyEnCAkb27snpHrj5ntlbTslbzrkJzri6QuJyk7CiAgICAgICAgCiAgICAgICAgLy8gZXZlbnRidXMuJG9uKCdzZW5kU2VhcmNoJywgKHNlYXJjaFR4dCwgY2hlY2spID0+IHsKICAgICAgICAvLyAgICAgY29uc29sZS5sb2coc2VhcmNoVHh0LCBjaGVjayk7CiAgICAgICAgLy8gICAgIHRoaXMubmV3TW92aWUoc2VhcmNoVHh0LCBjaGVjayk7CiAgICAgICAgLy8gfSkKCiAgICAgICAgLy8g7J2067Kk7Yq467KE7IqkIOyViOuQmOyEnCBpbnB1dO2OmOydtOyngOyXkOyEnCDrsJTroZwgc3RhdGXsl5Ag64Sj7Ja07KSAIOqwkiDqsIDsoLjsmLQuCiAgICAgICAgY29uc29sZS5sb2codGhpcy4kc3RvcmUuc3RhdGUuc2VhcmNoVHh0KTsKICAgICAgICBjb25zb2xlLmxvZyh0aGlzLiRzdG9yZS5zdGF0ZS5zZWFyY2hUeHQuY2hlY2spOwogICAgICAgIGNvbnNvbGUubG9nKHRoaXMuJHN0b3JlLnN0YXRlLnNlYXJjaFR4dC5zZWFyY2hUeHQpOwogICAgICAgIC8vIGNvbnN0IGNoZWNrVHh0ID0gdGhpcy4kc3RvcmUuc3RhdGUuc2VhcmNoVHh0LmNoZWNrOwogICAgICAgIC8vIGNvbnN0IGlucHV0VHh0ID0gdGhpcy4kc3RvcmUuc3RhdGUuc2VhcmNoVHh0LnNlYXJjaFR4dDsKCiAgICAgICAgY29uc3Qgc2VhcmNoVHh0ID0gdGhpcy4kc3RvcmUuc3RhdGUuc2VhcmNoVHh0OwogICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdGRVRDSF9USVRMRScsIHNlYXJjaFR4dCk7CgogICAgICAgIC8vIG1vdmllRGF0YSgpOwoKICAgIH0sCiAgICBtZXRob2RzOiB7CiAgICAgICAgLy8gcG9zdGVyIHVybCDtjrjsp5EuKHVybOydtCDrkZDqsJwg7J207IOB7J28IOqyveyasCDssqvrsojsp7ggdXJs66eMIOy2lOy2nCkKICAgICAgICBwb3N0ZXJVUkwodXJsKSB7ICAgICAgICAgICAgCiAgICAgICAgICAgIGlmKHVybCA9PT0gJycpIHsgICAvLyB1cmzsnbQg7JeG7J2EIOqyveyasAogICAgICAgICAgICAgICAgLy8gcG9zdGVyIHVybOyjvOyGjOqwgCDsl4bsnYQg6rK97JqwIOu5iCDsnbTrr7jsp4Ag7LaU7LacLgogICAgICAgICAgICAgICAgcmV0dXJuICdodHRwOi8vcGxhY2Vob2xkLml0LzIxM3gzMDMnOwogICAgICAgICAgICB9ZWxzZSBpZih1cmwuaW5kZXhPZignfCcpID09PSAtMSkgeyAgIC8vIHVybOydtCAx6rCc7J28IOqyveyasAogICAgICAgICAgICAgICAgcmV0dXJuIHVybDsKICAgICAgICAgICAgfWVsc2UgaWYodXJsLmluZGV4T2YoJ3wnKSkgeyAgIC8vIHVybOydtCAy6rCcIOydtOyDgeydvCDqsr3smrAgIAogICAgICAgICAgICAgICAgLy8gcG9zdGVyIHVybOydtCDrkZDqsJwg7J207IOB7J28IOqyveyasCBqcGfsnZgg66eI7KeA66eJIOq4gOyekOyduCBn7J2YIGluZGV47Iic67KI66eM7YG8IOyjvOyGjCDstpTstpwuCiAgICAgICAgICAgICAgICAvLyAgfCA8LSDsnbQg6riw7Zi466W8IOq4sOykgOycvOuhnCDtlojrjZTri4ggdXJsIOyjvOyGjOqwgCDtlZjrgpjsnbwg6rK97JqwIOyjvOyGjOqwgCDslYTsmIgg7IKs65287KC4IOuyhOugpOyEnCBqcGfquIDsnpDroZwg7YyQ64uo7ZW07KO864qUIOqyg+ycvOuhnCDsiJjsoJUuCiAgICAgICAgICAgICAgICAvLyByZXR1cm4gdXJsLnN1YnN0cmluZygwLCB1cmwuaW5kZXhPZih1cmwubWF0Y2goL2cvaSkpICsgMSk7IAogICAgICAgICAgICAgICAgLy8gJ3wn66GcIOq4sOykgOydhCDrsJTqv5TspIwuIOuMgOyLoCDquLDsobTqs7wg64us66asIDPqsIDsp4DsnZgg6rK97Jqw66GcIOu2hOulmO2VqC4gCiAgICAgICAgICAgICAgICByZXR1cm4gdXJsLnN1YnN0cmluZygwLCB1cmwuaW5kZXhPZignfCcpKTsgCiAgICAgICAgICAgIH0gCiAgICAgICAgfSwKICAgICAgICAvLyB0aXRsZSwgbmFtZSwgZ2VucmUg7Y647KeRLgogICAgICAgIHRleHRFZGl0KHRleHQpIHsKICAgICAgICAgICAgLy8g6rKA7IOJ7Ja066W8IOuCmO2DgOuCtOuKlCAhSEUsICFIU+q4gOyekCDsgq3soJwuCiAgICAgICAgICAgIHJldHVybiB0ZXh0LnJlcGxhY2UoLyFIRXwhSFMvZywgJycpOwogICAgICAgIH0sCiAgICAgICAgLy8g7Lac7JewIOuwsOyasOqwgCDrp47snYQg6rK97JqwIDXrqoXquYzsp4Drp4wg7LaU7Lac7ZWY6rOgIOyLtuydjC4KICAgICAgICAvLyBhY3RvcktleShhY3RvcikgewogICAgICAgIC8vICAgICBpZihhY3RvcikgCiAgICAgICAgLy8gfSwKCiAgICAgICAgLy8g64uk7IucIOqygOyDie2VmOq4sCDrsoTtirwg7YG066atIOyLnCBtYWlu7Y6Y7J207KeA66GcIOydtOuPmS4KICAgICAgICBnb01haW4oKSB7CiAgICAgICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKCcvbWFpbicpOwogICAgICAgIH0sCiAgICAgICAgLy8gcG9zdGVy7YG066atIOyLnCDshLjrtoAg7KCV67O0IO2OmOydtOyngChJbmZvcm1QYWdlKeuhnCDsnbTrj5kuCiAgICAgICAgbW92ZUluZm9ybShtb3ZpZSkgewogICAgICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ0NMSUNLX01PVklFJywgbW92aWUpOwogICAgICAgICAgICB0aGlzLiRyb3V0ZXIucHVzaCgnL2luZm9ybScpOwogICAgICAgIH0KCiAgICAgICAgLy8gbW92aWVkYXRhKCkgewogICAgICAgIC8vICAgICB0aGlzLiRzdG9yZS5zdGF0ZS5yZXN1bHQ7CiAgICAgICAgICAgIAogICAgICAgIC8vICAgICAvLyDrjbDsnbTthLDrp4zrk6TslrTshJwg6re4IOydtOumhCDslYjsl5Ag7J20IOqwkuydhCDspJjrs7TsnpAuCiAgICAgICAgLy8gfSwKICAgICAgICAvLyBzcGHroZwg7KCc7J6R7ZWY66Ck64uIIOychOydmCBjcmVhdGVk7JeQ7IScIOydtOuypO2KuOuyhOyKpOuhnCDrsJvslYTsmKTripTqsowg7J6R64+Z7J20IOyViOuQmOyWtOyEnCwg7JWE7JiIIOydtOuypO2KuOuyhOyKpOulvCDsgqzsmqntlZjsp4Ag7JWK7J2MLgogICAgICAgIC8vIOuUsOudvOyEnCwg7JWE656Y7J2YIG5ld01vdmllKCntlajsiJgg7KO87ISd7LKY66asIO2VnCDqsoMuCgogICAgICAgIC8vIG5ld01vdmllKHNlYXJjaFR4dCwgY2hlY2spIHsKICAgICAgICAvLyAgICAgY29uc29sZS5sb2coc2VhcmNoVHh0LCBjaGVjayk7CiAgICAgICAgICAgIAogICAgICAgIC8vICAgICBjb25zb2xlLmxvZygn7JiB7ZmUIOqygOyDieyWtCDrsJvslZjri6QhISEhJyk7CiAgICAgICAgLy8gICAgIGNvbnN0IHR4dENoZWNrID0ge3NlYXJjaFR4dCwgY2hlY2t9OwogICAgICAgIC8vICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnRkVUQ0hfVElUTEUnLCB0eHRDaGVjaykKICAgICAgICAvLyB9CiAgICB9CgogICAgLy8gY3JlYXRlZCgpIHsKICAgIC8vICAgICBheGlvcwogICAgLy8gICAgIC5nZXQoJyBodHRwOi8vYXBpLmtvcmVhZmlsbS5vci5rci9vcGVuYXBpLWRhdGEyL3dpc2VudXQvc2VhcmNoX2FwaS9zZWFyY2hfeG1sMi5qc3A/Y29sbGVjdGlvbj1rbWRiX25ldzImZGV0YWlsPU4mZGlyZWN0PSVFQiVCMCU5NSVFQyVCMCVBQyVFQyU5QSVCMSZTZXJ2aWNlS2V5PU0xTlYxQjExMDFIWjMyODJUUlBXJykKICAgIC8vICAgICAudGhlbihyZXMgPT4gewogICAgLy8gICAgICAgICB0aGlzLm1vdmllRGF0YSA9IHJlcy5kYXRhOwogICAgLy8gICAgIH0pOwogICAgLy8gfQp9Cg=="},{"version":3,"sources":["MovieConts.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"MovieConts.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"movieConts\">\n    <button class=\"gomainBtn\" @click.prevent=\"goMain\">← 다시 검색하기</button>\n      <!-- 검색한 단어 출력 -->\n    <h2>\" {{ moviedata.KMAQuery }} \"</h2>\n\n    <div class=\"dataBox clear\">\n        <div class=\"movies\" v-if=\"movieResult\"> \n            <!-- v-if를 줘서 영화 데이터가 존재할 때만 영화 정보 박스(.movies)를 보이게 함. + movieResult속에 있는 데이터들 사용하려면 적어줘야함.(왜그런지는 모르겠다..) -->\n            <div \n                class=\"movieBox\"\n                v-for=\"(movie, index) in movieResult \" v-bind:key=\"index\" >\n                <div class=\"imgTitle\" @click=\"moveInform(movie)\">\n                    <img                     \n                        v-bind:src=\"posterURL(movie.posters)\" \n                        v-bind:alt=\"textEdit(movie.title)\"/>\n\n                    <!-- title의 불필요한 글자 삭제해줌. -->\n                    <!-- <p>제목: {{ movie.title.replace(/!HS|!HE/g, '') }}</p> -->\n                    <!-- <p>제목: {{ textEdit(movie.title) }} ( {{ movie.prodYear }} )</p> -->\n\n                    <div class=\"hoverBox\">\n                        <p class=\"title\">{{ textEdit(movie.title) }}<br/>( {{ movie.prodYear }} )</p>\n                        <p class=\"director\">감독: {{ textEdit(movie.directors.director[0].directorNm) }}</p>\n                        <p class=\"story\" v-if=\"movie.plots.plot[0].plotText !== ''\">줄거리: {{ movie.plots.plot[0].plotText }}</p>\n                    </div>\n                </div>\n            </div><!--.movieBox-->\n        </div><!--.movies-->\n\n        <p class=\"nodataTxt\" v-else>해당하는 영화가 없습니다.</p>\n    </div><!--.dataBox-->\n    \n    <br/><br/>\n    <!-- {{ moviedata }} -->\n  </div><!--.movieConts-->\n</template>\n\n<script>\nimport { eventbus } from '../main';\n\nexport default {\n    computed: {\n        moviedata() {\n            return this.$store.state.moviedata;\n        },\n        // dataInMoviedata() {\n        //     return this.moviedata.Data;\n        // },\n        movieResult() {\n            return this.$store.state.result;\n        },\n    },\n    created() {\n        // 이벤트버스로 mainConts에서 입력한 검색어 불러옴.\n        console.log('이벤트버스 이용해서 movie페이지에서 $on작동해야된다.');\n        \n        // eventbus.$on('sendSearch', (searchTxt, check) => {\n        //     console.log(searchTxt, check);\n        //     this.newMovie(searchTxt, check);\n        // })\n\n        // 이벤트버스 안되서 input페이지에서 바로 state에 넣어준 값 가져옴.\n        console.log(this.$store.state.searchTxt);\n        console.log(this.$store.state.searchTxt.check);\n        console.log(this.$store.state.searchTxt.searchTxt);\n        // const checkTxt = this.$store.state.searchTxt.check;\n        // const inputTxt = this.$store.state.searchTxt.searchTxt;\n\n        const searchTxt = this.$store.state.searchTxt;\n        this.$store.dispatch('FETCH_TITLE', searchTxt);\n\n        // movieData();\n\n    },\n    methods: {\n        // poster url 편집.(url이 두개 이상일 경우 첫번째 url만 추출)\n        posterURL(url) {            \n            if(url === '') {   // url이 없을 경우\n                // poster url주소가 없을 경우 빈 이미지 추출.\n                return 'http://placehold.it/213x303';\n            }else if(url.indexOf('|') === -1) {   // url이 1개일 경우\n                return url;\n            }else if(url.indexOf('|')) {   // url이 2개 이상일 경우  \n                // poster url이 두개 이상일 경우 jpg의 마지막 글자인 g의 index순번만큼 주소 추출.\n                //  | <- 이 기호를 기준으로 했더니 url 주소가 하나일 경우 주소가 아예 사라져 버려서 jpg글자로 판단해주는 것으로 수정.\n                // return url.substring(0, url.indexOf(url.match(/g/i)) + 1); \n                // '|'로 기준을 바꿔줌. 대신 기존과 달리 3가지의 경우로 분류함. \n                return url.substring(0, url.indexOf('|')); \n            } \n        },\n        // title, name, genre 편집.\n        textEdit(text) {\n            // 검색어를 나타내는 !HE, !HS글자 삭제.\n            return text.replace(/!HE|!HS/g, '');\n        },\n        // 출연 배우가 많을 경우 5명까지만 추출하고 싶음.\n        // actorKey(actor) {\n        //     if(actor) \n        // },\n\n        // 다시 검색하기 버튼 클릭 시 main페이지로 이동.\n        goMain() {\n            this.$router.push('/main');\n        },\n        // poster클릭 시 세부 정보 페이지(InformPage)로 이동.\n        moveInform(movie) {\n            this.$store.commit('CLICK_MOVIE', movie);\n            this.$router.push('/inform');\n        }\n\n        // moviedata() {\n        //     this.$store.state.result;\n            \n        //     // 데이터만들어서 그 이름 안에 이 값을 줘보자.\n        // },\n        // spa로 제작하려니 위의 created에서 이벤트버스로 받아오는게 작동이 안되어서, 아예 이벤트버스를 사용하지 않음.\n        // 따라서, 아래의 newMovie()함수 주석처리 한 것.\n\n        // newMovie(searchTxt, check) {\n        //     console.log(searchTxt, check);\n            \n        //     console.log('영화 검색어 받았다!!!!');\n        //     const txtCheck = {searchTxt, check};\n        //     this.$store.dispatch('FETCH_TITLE', txtCheck)\n        // }\n    }\n\n    // created() {\n    //     axios\n    //     .get(' http://api.koreafilm.or.kr/openapi-data2/wisenut/search_api/search_xml2.jsp?collection=kmdb_new2&detail=N&direct=%EB%B0%95%EC%B0%AC%EC%9A%B1&ServiceKey=M1NV1B1101HZ3282TRPW')\n    //     .then(res => {\n    //         this.movieData = res.data;\n    //     });\n    // }\n}\n</script>\n\n<style scoped>\n\n</style>"]}]}