{"remainingRequest":"/Users/eunjae/Desktop/github/movieApp_ej/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/eunjae/Desktop/github/movieApp_ej/src/components/MovieConts.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/eunjae/Desktop/github/movieApp_ej/src/components/MovieConts.vue","mtime":1591838750520},{"path":"/Users/eunjae/Desktop/github/movieApp_ej/node_modules/cache-loader/dist/cjs.js","mtime":1591071293823},{"path":"/Users/eunjae/Desktop/github/movieApp_ej/node_modules/babel-loader/lib/index.js","mtime":1591071293737},{"path":"/Users/eunjae/Desktop/github/movieApp_ej/node_modules/cache-loader/dist/cjs.js","mtime":1591071293823},{"path":"/Users/eunjae/Desktop/github/movieApp_ej/node_modules/vue-loader/lib/index.js","mtime":1591071296053}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IGV2ZW50YnVzIH0gZnJvbSAnLi4vbWFpbic7CmltcG9ydCB7IHNhdmVJbmZvcm0sIHNhdmVGaXJzdEtleSB9IGZyb20gJy4uL3V0aWxzL2Nvb2tpZXMnOwoKZXhwb3J0IGRlZmF1bHQgewogICAgY29tcHV0ZWQ6IHsKICAgICAgICBpbnB1dFRleHQoKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5zZWFyY2hUeHRCb3guc2VhcmNoVHh0OwogICAgICAgIH0sCiAgICAgICAgbW92aWVkYXRhKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUubW92aWVkYXRhOwogICAgICAgIH0sCiAgICAgICAgLy8gZGF0YUluTW92aWVkYXRhKCkgewogICAgICAgIC8vICAgICByZXR1cm4gdGhpcy5tb3ZpZWRhdGEuRGF0YTsKICAgICAgICAvLyB9LAogICAgICAgIG1vdmllUmVzdWx0KCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUucmVzdWx0OwogICAgICAgIH0sCiAgICB9LAogICAgY3JlYXRlZCgpIHsKICAgICAgICAvLyDsnbTrsqTtirjrsoTsiqTroZwgbWFpbkNvbnRz7JeQ7IScIOyeheugpe2VnCDqsoDsg4nslrQg67aI65+s7Ji0LgogICAgICAgIGNvbnNvbGUubG9nKCfsnbTrsqTtirjrsoTsiqQg7J207Jqp7ZW07IScIG1vdmll7Y6Y7J207KeA7JeQ7IScICRvbuyekeuPme2VtOyVvOuQnOuLpC4nKTsKICAgICAgICAKICAgICAgICAvLyBldmVudGJ1cy4kb24oJ3NlbmRTZWFyY2gnLCAoc2VhcmNoVHh0LCBjaGVjaykgPT4gewogICAgICAgIC8vICAgICBjb25zb2xlLmxvZyhzZWFyY2hUeHQsIGNoZWNrKTsKICAgICAgICAvLyAgICAgdGhpcy5uZXdNb3ZpZShzZWFyY2hUeHQsIGNoZWNrKTsKICAgICAgICAvLyB9KQoKICAgICAgICAvLyDsnbTrsqTtirjrsoTsiqQg7JWI65CY7IScIGlucHV07Y6Y7J207KeA7JeQ7IScIOuwlOuhnCBzdGF0ZeyXkCDrhKPslrTspIAg6rCSIOqwgOyguOyYtC4KICAgICAgICBjb25zb2xlLmxvZyh0aGlzLiRzdG9yZS5zdGF0ZS5zZWFyY2hUeHRCb3gpOwogICAgICAgIGNvbnNvbGUubG9nKHRoaXMuJHN0b3JlLnN0YXRlLnNlYXJjaFR4dEJveC5jaGVjayk7CiAgICAgICAgY29uc29sZS5sb2codGhpcy4kc3RvcmUuc3RhdGUuc2VhcmNoVHh0Qm94LnNlYXJjaFR4dCk7CiAgICAgICAgLy8gY29uc3QgY2hlY2tUeHQgPSB0aGlzLiRzdG9yZS5zdGF0ZS5zZWFyY2hUeHQuY2hlY2s7CiAgICAgICAgLy8gY29uc3QgaW5wdXRUeHQgPSB0aGlzLiRzdG9yZS5zdGF0ZS5zZWFyY2hUeHQuc2VhcmNoVHh0OwoKICAgICAgICBjb25zdCBzZWFyY2hUeHRCb3ggPSB0aGlzLiRzdG9yZS5zdGF0ZS5zZWFyY2hUeHRCb3g7CiAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ0ZFVENIX1RJVExFJywgc2VhcmNoVHh0Qm94KTsKCiAKICAgICAgICAvLyDssqvrsojsp7gg7YKk7JuM65OcIOu5iOy5uOycvOuhnCDrp4zrk6TslrTspIwuCiAgICAgICAgc2F2ZUZpcnN0S2V5KCcnKTsKCiAgICB9LAogICAgbWV0aG9kczogewogICAgICAgIC8vIOyeheugpe2VnCDqsoDsg4nslrQg7LaU7LacLijsmIHtmZR0eXBl64+EIO2VqOq7mCDrk6TslrTsnojslrQg6rKA7IOJ7Ja066eMIOu9keyVhOuDhCkKICAgICAgICBpbnB1dFRleHRFZGl0KHRleHQpIHsKICAgICAgICAgICAgcmV0dXJuIHRleHQuc3Vic3RyaW5nKHRleHQuaW5kZXhPZignPScpKzEsIHRleHQubGVuZ3RoKTsKICAgICAgICB9LAogICAgICAgIC8vbW92aWXqsoDsg4kg6rKw6rO8IOqwnOyImOqwgCDstJ0gMTAw6rCcIOydtOyDgeydvCDqsr3smrAg6rCc7IiY7JWI64K07ZGc7Iuc66W8IDEwMOq5jOyngOunjCDrgpjtg4Drg4QuCiAgICAgICAgbW92aWVOdW0obnVtKSB7CiAgICAgICAgICAgIGlmKG51bSA8PSAxMDApIHJldHVybiBudW07CiAgICAgICAgICAgIGVsc2UgaWYobnVtID4gMTAwKSByZXR1cm4gMTAwOwogICAgICAgIH0sCiAgICAgICAgLy8gcG9zdGVyIHVybCDtjrjsp5EuKHVybOydtCDrkZDqsJwg7J207IOB7J28IOqyveyasCDssqvrsojsp7ggdXJs66eMIOy2lOy2nCkKICAgICAgICBwb3N0ZXJVUkwodXJsKSB7ICAgICAgICAgICAgCiAgICAgICAgICAgIGlmKHVybCA9PT0gJycpIHsgICAvLyB1cmzsnbQg7JeG7J2EIOqyveyasAogICAgICAgICAgICAgICAgLy8gcG9zdGVyIHVybOyjvOyGjOqwgCDsl4bsnYQg6rK97JqwIOu5iCDsnbTrr7jsp4Ag7LaU7LacLgogICAgICAgICAgICAgICAgcmV0dXJuICdodHRwOi8vcGxhY2Vob2xkLml0LzIxM3gzMDMnOwogICAgICAgICAgICB9ZWxzZSBpZih1cmwuaW5kZXhPZignfCcpID09PSAtMSkgeyAgIC8vIHVybOydtCAx6rCc7J28IOqyveyasAogICAgICAgICAgICAgICAgcmV0dXJuIHVybDsKICAgICAgICAgICAgfWVsc2UgaWYodXJsLmluZGV4T2YoJ3wnKSkgeyAgIC8vIHVybOydtCAy6rCcIOydtOyDgeydvCDqsr3smrAgIAogICAgICAgICAgICAgICAgLy8gcG9zdGVyIHVybOydtCDrkZDqsJwg7J207IOB7J28IOqyveyasCBqcGfsnZgg66eI7KeA66eJIOq4gOyekOyduCBn7J2YIGluZGV47Iic67KI66eM7YG8IOyjvOyGjCDstpTstpwuCiAgICAgICAgICAgICAgICAvLyAgfCA8LSDsnbQg6riw7Zi466W8IOq4sOykgOycvOuhnCDtlojrjZTri4ggdXJsIOyjvOyGjOqwgCDtlZjrgpjsnbwg6rK97JqwIOyjvOyGjOqwgCDslYTsmIgg7IKs65287KC4IOuyhOugpOyEnCBqcGfquIDsnpDroZwg7YyQ64uo7ZW07KO864qUIOqyg+ycvOuhnCDsiJjsoJUuCiAgICAgICAgICAgICAgICAvLyByZXR1cm4gdXJsLnN1YnN0cmluZygwLCB1cmwuaW5kZXhPZih1cmwubWF0Y2goL2cvaSkpICsgMSk7IAogICAgICAgICAgICAgICAgLy8gJ3wn66GcIOq4sOykgOydhCDrsJTqv5TspIwuIOuMgOyLoCDquLDsobTqs7wg64us66asIDPqsIDsp4DsnZgg6rK97Jqw66GcIOu2hOulmO2VqC4gCiAgICAgICAgICAgICAgICByZXR1cm4gdXJsLnN1YnN0cmluZygwLCB1cmwuaW5kZXhPZignfCcpKTsgCiAgICAgICAgICAgIH0gCiAgICAgICAgfSwKICAgICAgICAvLyB0aXRsZSwgbmFtZSwgZ2VucmUg7Y647KeRLgogICAgICAgIHRleHRFZGl0KHRleHQpIHsKICAgICAgICAgICAgLy8g6rKA7IOJ7Ja066W8IOuCmO2DgOuCtOuKlCAhSEUsICFIU+q4gOyekCDsgq3soJwuCiAgICAgICAgICAgIHJldHVybiB0ZXh0LnJlcGxhY2UoLyFIRXwhSFMvZywgJycpOwogICAgICAgIH0sCiAgICAgICAgLy8g7Lac7JewIOuwsOyasOqwgCDrp47snYQg6rK97JqwIDXrqoXquYzsp4Drp4wg7LaU7Lac7ZWY6rOgIOyLtuydjC4KICAgICAgICAvLyBhY3RvcktleShhY3RvcikgewogICAgICAgIC8vICAgICBpZihhY3RvcikgCiAgICAgICAgLy8gfSwKCiAgICAgICAgLy8g64uk7IucIOqygOyDie2VmOq4sCDrsoTtirwg7YG066atIOyLnCBtYWlu7Y6Y7J207KeA66GcIOydtOuPmS4KICAgICAgICBnb01haW4oKSB7CiAgICAgICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKCcvbWFpbicpOwogICAgICAgIH0sCiAgICAgICAgLy8ga2V5d29yZO2VmOuCmOyUqSDrhKPslrTspIwuICsgZGF0YeydmCBrZXl3b3JkRmlyc3Tsl5Ag7LKrIOuyiOynuCDtgqTsm4zrk5wg64Sj7Ja07KSMLgogICAgICAgIGtleVdvcmQoa2V5KSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKGtleSk7CiAgICAgICAgICAgIAogICAgICAgICAgICBpZihrZXkgPT09ICcnKSByZXR1cm47CiAgICAgICAgICAgIGVsc2UgaWYoa2V5LmluZGV4T2YoJywnKSA9PT0gLTEpIHsKICAgICAgICAgICAgICAgIC8vIHRoaXMua2V5d29yZEZpcnN0ID0ga2V5OwogICAgICAgICAgICAgICAgcmV0dXJuIGtleTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIGlmKGtleS5pbmRleE9mKCcsJykpIHsKICAgICAgICAgICAgICAgIC8vIHRoaXMua2V5d29yZEZpcnN0ID0ga2V5LnNwbGl0KCcsJylbMF07CiAgICAgICAgICAgICAgICByZXR1cm4ga2V5LnNwbGl0KCcsJylbMF07CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8vIHBvc3Rlcu2BtOumrSDsi5wg7IS467aAIOygleuztCDtjpjsnbTsp4AoSW5mb3JtUGFnZSnroZwg7J2064+ZLijtlbTri7kg7JiB7ZmU7J2YIOuNsOydtO2EsOuTpOuPhCDrhJjqsqjspIwuKQogICAgICAgIG1vdmVJbmZvcm0oa2V5d29yZCwgbW92aWVJRCwgZGlyZWN0b3IsIG1vdmllU2VxKSB7CiAgICAgICAgICAgIC8vIEluZm9ybUNvbnRz6rCAIOyDiOuhnOqzoOy5qO2VtOuPhCDqt7jrjIDroZwg64K07Jqp7J20IOuCqOyVhOyeiOuPhOuhnSDtlZjquLAg7JyE7ZW07IScLCDsspjsnYzrtoDthLAgdGl0bGUsIGRpcmVjdG9yLCBtb3ZpZVNlceulvCBjb29raWXsmYAgc3RvcmXsl5Ag64SY6rKo7KSY7IScIGFwaeyDneyEse2VoCDsiJgg7J6I64+E66GdIO2VnCDqsoPsnbTri6QuCiAgICAgICAgICAgIC8vIHRpdGxlLCBkaXJlY3RvciwgbW92aWVTZXHrpbwg7ZWY64KY7JSp66eMIO2VtOu0pOuNlOuLiCDri6Trpbgg7JiB7ZmU6rCAIOyXsOqysOuQmOuKlCDqsr3smrDqsIAg7J6I7Ja07IScIOyhsOqxtOydhCAz6rCc64KYIOykgCDqsoMuCiAgICAgICAgICAgIHNhdmVJbmZvcm0oYHRpdGxlPSR7bW92aWVJRH0mZGlyZWN0b3I9JHtkaXJlY3Rvcn0mbW92aWVTZXE9JHttb3ZpZVNlcX1gKTsKICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy4kc3RvcmUuc3RhdGUubW92aWVJRCk7CgogICAgICAgICAgICBjb25zdCBzZWFyY2hUeHRCb3ggPSB7CiAgICAgICAgICAgICAgICAvLyBzZWFyY2hUeHQgOiBgbW92aWVJZD0ke21vdmllSUR9YCwgCiAgICAgICAgICAgICAgICBzZWFyY2hUeHQgOiBgdGl0bGU9JHttb3ZpZUlEfSZkaXJlY3Rvcj0ke2RpcmVjdG9yfSZtb3ZpZVNlcT0ke21vdmllU2VxfWAsIAogICAgICAgICAgICB9OwogICAgICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ01PVklFX0lEJywgc2VhcmNoVHh0Qm94KTsKCiAgICAgICAgICAgIC8vY29va2ll7JeQIOyyqyDrsojsp7gga2V57KCV67O0IOyggOyepS4KICAgICAgICAgICAgc2F2ZUZpcnN0S2V5KGBrZXl3b3JkPSR7a2V5d29yZH1gKTsKICAgICAgICAgICAgY29uc3Qga2V5d29yZEZpcnN0Qm94ID0gewogICAgICAgICAgICAgICAgc2VhcmNoVHh0IDogYGtleXdvcmQ9JHtrZXl3b3JkfWAsIAogICAgICAgICAgICAgICAgY2hlY2sgOiAna2V5d29yZCcsCiAgICAgICAgICAgIH07IAogICAgICAgICAgICAKICAgICAgICAgICAgLy8g7LKrIOuyiOyosCBrZXnsoJXrs7Qg7J207Jqp7ZW07IScIGFwaeq1rO2VqC4o6riw7KG07J2YIGFwaeq1rO2VmOuKlCDsvZTrk5zsl5Ag64Sj64qUIOyduOyekCDtmJXsi53qs7wg6rCZ6rKM7ZWY6riwIOychO2VtCAna2V5d29yZEZpcnN0Qm94J+yGjeyXkCBzZWFyY2hUeHTrpbwg64Sj64qUIOuwqeyLneycvOuhnCDsoJzsnpHtlZwg6rKD7J6ELikKICAgICAgICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCdTSU1JTEFSX01PVklFX0FQSScsIGtleXdvcmRGaXJzdEJveCk7CiAgICAgICAgICAgIAogICAgICAgICAgICAvLyB0aGlzLiRzdG9yZS5jb21taXQoJ0NMSUNLX01PVklFJywgbW92aWUpOyAKICAgICAgICAgICAgdGhpcy4kcm91dGVyLnB1c2goJy9pbmZvcm0nKTsKICAgICAgICB9CgogICAgfQoKfQo="},{"version":3,"sources":["MovieConts.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA","file":"MovieConts.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"movieConts\">\n    <button class=\"gomainBtn\" @click.prevent=\"goMain\">\n        <span class=\"arrow\">← </span> \n        <span class=\"text\"> 검색 페이지로</span>\n    </button>\n\n    <!-- 검색한 단어 출력 -->\n    <h2>{{ inputTextEdit(inputText) }}</h2>\n\n    <div class=\"movieNumBox\">\n        <p>총 {{ movieNum(moviedata.TotalCount) }}개의 영화가 검색되었습니다.</p>\n        <p>( 오른쪽으로 스크롤 하면 순서대로 모든 영화 목록을 볼 수 있습니다. )</p>\n    </div>\n\n    <div class=\"dataBox clear\">\n        <div class=\"movies clear\" v-if=\"movieResult\"> \n            <!-- v-if를 줘서 영화 데이터가 존재할 때만 영화 정보 박스(.movies)를 보이게 함. + movieResult속에 있는 데이터들 사용하려면 적어줘야함.(왜그런지는 모르겠다..) -->\n            <div \n                class=\"movieBox\"\n                v-for=\"(movie, index) in movieResult \" \n                v-bind:key=\"index\"\n            >\n                <div class=\"imgTitle\" @click=\"moveInform(keyWord(movie.keywords), textEdit(movie.title), textEdit(movie.directors.director[0].directorNm), movie.movieSeq)\">\n                    <img                     \n                        v-bind:src=\"posterURL(movie.posters)\" \n                        v-bind:alt=\"textEdit(movie.title)\"\n                    />\n\n                    <div class=\"hoverBox\">\n                        <!-- <p class=\"title\">{{ textEdit(movie.title) }}<br/>( {{ movie.prodYear }} )</p> -->\n                        <p class=\"director\">감독: {{ textEdit(movie.directors.director[0].directorNm) }}</p>\n                        <p class=\"story\" v-if=\"movie.plots.plot[0].plotText !== ''\">줄거리: {{ movie.plots.plot[0].plotText }}</p>\n                    </div>\n                </div>\n\n                <p class=\"title\">\n                    <span>{{ textEdit(movie.title) }}</span>\n                    <span class=\"year\">( {{ movie.prodYear }} )</span>\n                </p>\n            </div><!--.movieBox-->\n        </div><!--.movies-->\n\n        <p class=\"nodataTxt\" v-else>해당하는 영화가 없습니다.</p>\n    </div><!--.dataBox-->\n    \n    <br/><br/>\n    <!-- {{ moviedata }} -->\n  </div><!--.movieConts-->\n</template>\n\n<script>\nimport { eventbus } from '../main';\nimport { saveInform, saveFirstKey } from '../utils/cookies';\n\nexport default {\n    computed: {\n        inputText() {\n            return this.$store.state.searchTxtBox.searchTxt;\n        },\n        moviedata() {\n            return this.$store.state.moviedata;\n        },\n        // dataInMoviedata() {\n        //     return this.moviedata.Data;\n        // },\n        movieResult() {\n            return this.$store.state.result;\n        },\n    },\n    created() {\n        // 이벤트버스로 mainConts에서 입력한 검색어 불러옴.\n        console.log('이벤트버스 이용해서 movie페이지에서 $on작동해야된다.');\n        \n        // eventbus.$on('sendSearch', (searchTxt, check) => {\n        //     console.log(searchTxt, check);\n        //     this.newMovie(searchTxt, check);\n        // })\n\n        // 이벤트버스 안되서 input페이지에서 바로 state에 넣어준 값 가져옴.\n        console.log(this.$store.state.searchTxtBox);\n        console.log(this.$store.state.searchTxtBox.check);\n        console.log(this.$store.state.searchTxtBox.searchTxt);\n        // const checkTxt = this.$store.state.searchTxt.check;\n        // const inputTxt = this.$store.state.searchTxt.searchTxt;\n\n        const searchTxtBox = this.$store.state.searchTxtBox;\n        this.$store.dispatch('FETCH_TITLE', searchTxtBox);\n\n \n        // 첫번째 키워드 빈칸으로 만들어줌.\n        saveFirstKey('');\n\n    },\n    methods: {\n        // 입력한 검색어 추출.(영화type도 함께 들어있어 검색어만 뽑아냄)\n        inputTextEdit(text) {\n            return text.substring(text.indexOf('=')+1, text.length);\n        },\n        //movie검색 결과 개수가 총 100개 이상일 경우 개수안내표시를 100까지만 나타냄.\n        movieNum(num) {\n            if(num <= 100) return num;\n            else if(num > 100) return 100;\n        },\n        // poster url 편집.(url이 두개 이상일 경우 첫번째 url만 추출)\n        posterURL(url) {            \n            if(url === '') {   // url이 없을 경우\n                // poster url주소가 없을 경우 빈 이미지 추출.\n                return 'http://placehold.it/213x303';\n            }else if(url.indexOf('|') === -1) {   // url이 1개일 경우\n                return url;\n            }else if(url.indexOf('|')) {   // url이 2개 이상일 경우  \n                // poster url이 두개 이상일 경우 jpg의 마지막 글자인 g의 index순번만큼 주소 추출.\n                //  | <- 이 기호를 기준으로 했더니 url 주소가 하나일 경우 주소가 아예 사라져 버려서 jpg글자로 판단해주는 것으로 수정.\n                // return url.substring(0, url.indexOf(url.match(/g/i)) + 1); \n                // '|'로 기준을 바꿔줌. 대신 기존과 달리 3가지의 경우로 분류함. \n                return url.substring(0, url.indexOf('|')); \n            } \n        },\n        // title, name, genre 편집.\n        textEdit(text) {\n            // 검색어를 나타내는 !HE, !HS글자 삭제.\n            return text.replace(/!HE|!HS/g, '');\n        },\n        // 출연 배우가 많을 경우 5명까지만 추출하고 싶음.\n        // actorKey(actor) {\n        //     if(actor) \n        // },\n\n        // 다시 검색하기 버튼 클릭 시 main페이지로 이동.\n        goMain() {\n            this.$router.push('/main');\n        },\n        // keyword하나씩 넣어줌. + data의 keywordFirst에 첫 번째 키워드 넣어줌.\n        keyWord(key) {\n            console.log(key);\n            \n            if(key === '') return;\n            else if(key.indexOf(',') === -1) {\n                // this.keywordFirst = key;\n                return key;\n            }\n            else if(key.indexOf(',')) {\n                // this.keywordFirst = key.split(',')[0];\n                return key.split(',')[0];\n            }\n        },\n        // poster클릭 시 세부 정보 페이지(InformPage)로 이동.(해당 영화의 데이터들도 넘겨줌.)\n        moveInform(keyword, movieID, director, movieSeq) {\n            // InformConts가 새로고침해도 그대로 내용이 남아있도록 하기 위해서, 처음부터 title, director, movieSeq를 cookie와 store에 넘겨줘서 api생성할 수 있도록 한 것이다.\n            // title, director, movieSeq를 하나씩만 해봤더니 다른 영화가 연결되는 경우가 있어서 조건을 3개나 준 것.\n            saveInform(`title=${movieID}&director=${director}&movieSeq=${movieSeq}`);\n            console.log(this.$store.state.movieID);\n\n            const searchTxtBox = {\n                // searchTxt : `movieId=${movieID}`, \n                searchTxt : `title=${movieID}&director=${director}&movieSeq=${movieSeq}`, \n            };\n            this.$store.commit('MOVIE_ID', searchTxtBox);\n\n            //cookie에 첫 번째 key정보 저장.\n            saveFirstKey(`keyword=${keyword}`);\n            const keywordFirstBox = {\n                searchTxt : `keyword=${keyword}`, \n                check : 'keyword',\n            }; \n            \n            // 첫 번쨰 key정보 이용해서 api구함.(기존의 api구하는 코드에 넣는 인자 형식과 같게하기 위해 'keywordFirstBox'속에 searchTxt를 넣는 방식으로 제작한 것임.)\n            this.$store.commit('SIMILAR_MOVIE_API', keywordFirstBox);\n            \n            // this.$store.commit('CLICK_MOVIE', movie); \n            this.$router.push('/inform');\n        }\n\n    }\n\n}\n</script>\n\n<style scoped>\n\n</style>"]}]}