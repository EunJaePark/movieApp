{"remainingRequest":"/Users/eunjae/Desktop/github/movieApp_ej/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/eunjae/Desktop/github/movieApp_ej/src/components/MovieConts.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/eunjae/Desktop/github/movieApp_ej/src/components/MovieConts.vue","mtime":1592463129680},{"path":"/Users/eunjae/Desktop/github/movieApp_ej/node_modules/cache-loader/dist/cjs.js","mtime":1591071293823},{"path":"/Users/eunjae/Desktop/github/movieApp_ej/node_modules/babel-loader/lib/index.js","mtime":1591071293737},{"path":"/Users/eunjae/Desktop/github/movieApp_ej/node_modules/cache-loader/dist/cjs.js","mtime":1591071293823},{"path":"/Users/eunjae/Desktop/github/movieApp_ej/node_modules/vue-loader/lib/index.js","mtime":1591071296053}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IGV2ZW50YnVzIH0gZnJvbSAnLi4vbWFpbic7CmltcG9ydCB7IHNhdmVJbmZvcm0sIHNhdmVGaXJzdEtleSwgc2F2ZUxpa2UgfSBmcm9tICcuLi91dGlscy9jb29raWVzJzsKCmV4cG9ydCBkZWZhdWx0IHsKICAgIGNvbXB1dGVkOiB7CiAgICAgICAgaW5wdXRUZXh0KCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuc2VhcmNoVHh0Qm94LnNlYXJjaFR4dDsKICAgICAgICB9LAogICAgICAgIG1vdmllZGF0YSgpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLm1vdmllZGF0YTsKICAgICAgICB9LAogICAgICAgIC8vIGRhdGFJbk1vdmllZGF0YSgpIHsKICAgICAgICAvLyAgICAgcmV0dXJuIHRoaXMubW92aWVkYXRhLkRhdGE7CiAgICAgICAgLy8gfSwKICAgICAgICBtb3ZpZVJlc3VsdCgpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLnJlc3VsdDsKICAgICAgICB9LAogICAgfSwKICAgIGNyZWF0ZWQoKSB7CiAgICAgICAgLy8g7J2067Kk7Yq467KE7Iqk66GcIG1haW5Db250c+yXkOyEnCDsnoXroKXtlZwg6rKA7IOJ7Ja0IOu2iOufrOyYtC4KICAgICAgICBjb25zb2xlLmxvZygn7J2067Kk7Yq467KE7IqkIOydtOyaqe2VtOyEnCBtb3ZpZe2OmOydtOyngOyXkOyEnCAkb27snpHrj5ntlbTslbzrkJzri6QuJyk7CiAgICAgICAgCiAgICAgICAgLy8gZXZlbnRidXMuJG9uKCdzZW5kU2VhcmNoJywgKHNlYXJjaFR4dCwgY2hlY2spID0+IHsKICAgICAgICAvLyAgICAgY29uc29sZS5sb2coc2VhcmNoVHh0LCBjaGVjayk7CiAgICAgICAgLy8gICAgIHRoaXMubmV3TW92aWUoc2VhcmNoVHh0LCBjaGVjayk7CiAgICAgICAgLy8gfSkKCiAgICAgICAgLy8g7J2067Kk7Yq467KE7IqkIOyViOuQmOyEnCBpbnB1dO2OmOydtOyngOyXkOyEnCDrsJTroZwgc3RhdGXsl5Ag64Sj7Ja07KSAIOqwkiDqsIDsoLjsmLQuCiAgICAgICAgY29uc29sZS5sb2codGhpcy4kc3RvcmUuc3RhdGUuc2VhcmNoVHh0Qm94KTsKICAgICAgICBjb25zb2xlLmxvZyh0aGlzLiRzdG9yZS5zdGF0ZS5zZWFyY2hUeHRCb3guY2hlY2spOwogICAgICAgIGNvbnNvbGUubG9nKHRoaXMuJHN0b3JlLnN0YXRlLnNlYXJjaFR4dEJveC5zZWFyY2hUeHQpOwogICAgICAgIC8vIGNvbnN0IGNoZWNrVHh0ID0gdGhpcy4kc3RvcmUuc3RhdGUuc2VhcmNoVHh0LmNoZWNrOwogICAgICAgIC8vIGNvbnN0IGlucHV0VHh0ID0gdGhpcy4kc3RvcmUuc3RhdGUuc2VhcmNoVHh0LnNlYXJjaFR4dDsKCiAgICAgICAgY29uc3Qgc2VhcmNoVHh0Qm94ID0gdGhpcy4kc3RvcmUuc3RhdGUuc2VhcmNoVHh0Qm94OwogICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdGRVRDSF9USVRMRScsIHNlYXJjaFR4dEJveCk7CgogCiAgICAgICAgLy8gTW92aWVDb250c+2OmOydtOyngCDsoJHsho3si5zrp4jri6Qg7LKr67KI7Ke4IO2CpOybjOuTnCDruYjsubjsnLzroZwg66eM65Ok7Ja07KSMLgogICAgICAgIHNhdmVGaXJzdEtleSgnJyk7CgogICAgICAgIC8vIEluZnJvbUNvbnRz66W8IOuyl+yWtOuCmOuptCBjb29raWXsnZggbGlrZeyZgCBtb3ZpZV9JROulvCDruYTsm4zspIwuCiAgICAgICAgc2F2ZUxpa2UoJycpOwogICAgICAgIHNhdmVJbmZvcm0oJycpOwogICAgfSwKICAgIG1ldGhvZHM6IHsKICAgICAgICAvLyDsnoXroKXtlZwg6rKA7IOJ7Ja0IOy2lOy2nC4o7JiB7ZmUdHlwZeuPhCDtlajqu5gg65Ok7Ja07J6I7Ja0IOqygOyDieyWtOunjCDrvZHslYTrg4QpCiAgICAgICAgaW5wdXRUZXh0RWRpdCh0ZXh0KSB7CiAgICAgICAgICAgIHJldHVybiB0ZXh0LnN1YnN0cmluZyh0ZXh0LmluZGV4T2YoJz0nKSsxLCB0ZXh0Lmxlbmd0aCk7CiAgICAgICAgfSwKICAgICAgICAvL21vdmll6rKA7IOJIOqysOqzvCDqsJzsiJjqsIAg7LSdIDEwMOqwnCDsnbTsg4Hsnbwg6rK97JqwIOqwnOyImOyViOuCtO2RnOyLnOulvCAxMDDquYzsp4Drp4wg64KY7YOA64OELgogICAgICAgIG1vdmllTnVtKG51bSkgewogICAgICAgICAgICBpZihudW0gPD0gMTAwKSByZXR1cm4gbnVtOwogICAgICAgICAgICBlbHNlIGlmKG51bSA+IDEwMCkgcmV0dXJuIDEwMDsKICAgICAgICB9LAogICAgICAgIC8vIHBvc3RlciB1cmwg7Y647KeRLih1cmzsnbQg65GQ6rCcIOydtOyDgeydvCDqsr3smrAg7LKr67KI7Ke4IHVybOunjCDstpTstpwpCiAgICAgICAgcG9zdGVyVVJMKHVybCkgeyAgICAgICAgICAgIAogICAgICAgICAgICBpZih1cmwgPT09ICcnKSB7ICAgLy8gdXJs7J20IOyXhuydhCDqsr3smrAKICAgICAgICAgICAgICAgIC8vIHBvc3RlciB1cmzso7zshozqsIAg7JeG7J2EIOqyveyasCDruYgg7J2066+47KeAIOy2lOy2nC4KICAgICAgICAgICAgICAgIHJldHVybiAnaHR0cDovL3BsYWNlaG9sZC5pdC8yMTN4MzAzJzsKICAgICAgICAgICAgfWVsc2UgaWYodXJsLmluZGV4T2YoJ3wnKSA9PT0gLTEpIHsgICAvLyB1cmzsnbQgMeqwnOydvCDqsr3smrAKICAgICAgICAgICAgICAgIHJldHVybiB1cmw7CiAgICAgICAgICAgIH1lbHNlIGlmKHVybC5pbmRleE9mKCd8JykpIHsgICAvLyB1cmzsnbQgMuqwnCDsnbTsg4Hsnbwg6rK97JqwICAKICAgICAgICAgICAgICAgIC8vIHBvc3RlciB1cmzsnbQg65GQ6rCcIOydtOyDgeydvCDqsr3smrAganBn7J2YIOuniOyngOuniSDquIDsnpDsnbggZ+ydmCBpbmRleOyInOuyiOunjO2BvCDso7zshowg7LaU7LacLgogICAgICAgICAgICAgICAgLy8gIHwgPC0g7J20IOq4sO2YuOulvCDquLDspIDsnLzroZwg7ZaI642U64uIIHVybCDso7zshozqsIAg7ZWY64KY7J28IOqyveyasCDso7zshozqsIAg7JWE7JiIIOyCrOudvOyguCDrsoTroKTshJwganBn6riA7J6Q66GcIO2MkOuLqO2VtOyjvOuKlCDqsoPsnLzroZwg7IiY7KCVLgogICAgICAgICAgICAgICAgLy8gcmV0dXJuIHVybC5zdWJzdHJpbmcoMCwgdXJsLmluZGV4T2YodXJsLm1hdGNoKC9nL2kpKSArIDEpOyAKICAgICAgICAgICAgICAgIC8vICd8J+uhnCDquLDspIDsnYQg67CU6r+U7KSMLiDrjIDsi6Ag6riw7KG06rO8IOuLrOumrCAz6rCA7KeA7J2YIOqyveyasOuhnCDrtoTrpZjtlaguIAogICAgICAgICAgICAgICAgcmV0dXJuIHVybC5zdWJzdHJpbmcoMCwgdXJsLmluZGV4T2YoJ3wnKSk7IAogICAgICAgICAgICB9IAogICAgICAgIH0sCiAgICAgICAgLy8gdGl0bGUsIG5hbWUsIGdlbnJlIO2OuOynkS4KICAgICAgICB0ZXh0RWRpdCh0ZXh0KSB7CiAgICAgICAgICAgIC8vIOqygOyDieyWtOulvCDrgpjtg4DrgrTripQgIUhFLCAhSFPquIDsnpAg7IKt7KCcLgogICAgICAgICAgICByZXR1cm4gdGV4dC5yZXBsYWNlKC8hSEV8IUhTL2csICcnKTsKICAgICAgICB9LAogICAgICAgIC8vIOy2nOyXsCDrsLDsmrDqsIAg66eO7J2EIOqyveyasCA166qF6rmM7KeA66eMIOy2lOy2nO2VmOqzoCDsi7bsnYwuCiAgICAgICAgLy8gYWN0b3JLZXkoYWN0b3IpIHsKICAgICAgICAvLyAgICAgaWYoYWN0b3IpIAogICAgICAgIC8vIH0sCgogICAgICAgIC8vIOuLpOyLnCDqsoDsg4ntlZjquLAg67KE7Yq8IO2BtOumrSDsi5wgbWFpbu2OmOydtOyngOuhnCDsnbTrj5kuCiAgICAgICAgZ29NYWluKCkgewogICAgICAgICAgICB0aGlzLiRyb3V0ZXIucHVzaCgnL21haW4nKTsKICAgICAgICB9LAogICAgICAgIC8vIGtleXdvcmTtlZjrgpjslKkg64Sj7Ja07KSMLiArIGRhdGHsnZgga2V5d29yZEZpcnN07JeQIOyyqyDrsojsp7gg7YKk7JuM65OcIOuEo+yWtOykjC4KICAgICAgICBrZXlXb3JkKGtleSkgewogICAgICAgICAgICBjb25zb2xlLmxvZyhrZXkpOwogICAgICAgICAgICAKICAgICAgICAgICAgaWYoa2V5ID09PSAnJykgcmV0dXJuOwogICAgICAgICAgICBlbHNlIGlmKGtleS5pbmRleE9mKCcsJykgPT09IC0xKSB7CiAgICAgICAgICAgICAgICAvLyB0aGlzLmtleXdvcmRGaXJzdCA9IGtleTsKICAgICAgICAgICAgICAgIHJldHVybiBrZXk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSBpZihrZXkuaW5kZXhPZignLCcpKSB7CiAgICAgICAgICAgICAgICAvLyB0aGlzLmtleXdvcmRGaXJzdCA9IGtleS5zcGxpdCgnLCcpWzBdOwogICAgICAgICAgICAgICAgcmV0dXJuIGtleS5zcGxpdCgnLCcpWzBdOwogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvLyBwb3N0ZXLtgbTrpq0g7IucIOyEuOu2gCDsoJXrs7Qg7Y6Y7J207KeAKEluZm9ybVBhZ2Up66GcIOydtOuPmS4o7ZW064u5IOyYge2ZlOydmCDrjbDsnbTthLDrk6Trj4Qg64SY6rKo7KSMLikKICAgICAgICBtb3ZlSW5mb3JtKGtleXdvcmQsIG1vdmllSUQsIGRpcmVjdG9yLCBtb3ZpZVNlcSkgewogICAgICAgICAgICAvLyBJbmZvcm1Db250c+qwgCDsg4jroZzqs6DsuajtlbTrj4Qg6re464yA66GcIOuCtOyaqeydtCDrgqjslYTsnojrj4TroZ0g7ZWY6riwIOychO2VtOyEnCwg7LKY7J2M67aA7YSwIHRpdGxlLCBkaXJlY3RvciwgbW92aWVTZXHrpbwgY29va2ll7JmAIHN0b3Jl7JeQIOuEmOqyqOykmOyEnCBhcGnsg53shLHtlaAg7IiYIOyeiOuPhOuhnSDtlZwg6rKD7J2064ukLgogICAgICAgICAgICAvLyB0aXRsZSwgZGlyZWN0b3IsIG1vdmllU2Vx66W8IO2VmOuCmOyUqeunjCDtlbTrtKTrjZTri4gg64uk66W4IOyYge2ZlOqwgCDsl7DqsrDrkJjripQg6rK97Jqw6rCAIOyeiOyWtOyEnCDsobDqsbTsnYQgM+qwnOuCmCDspIAg6rKDLgogICAgICAgICAgICBzYXZlSW5mb3JtKGB0aXRsZT0ke21vdmllSUR9JmRpcmVjdG9yPSR7ZGlyZWN0b3J9Jm1vdmllU2VxPSR7bW92aWVTZXF9YCk7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMuJHN0b3JlLnN0YXRlLm1vdmllSUQpOwoKICAgICAgICAgICAgY29uc3Qgc2VhcmNoVHh0Qm94ID0gewogICAgICAgICAgICAgICAgLy8gc2VhcmNoVHh0IDogYG1vdmllSWQ9JHttb3ZpZUlEfWAsIAogICAgICAgICAgICAgICAgc2VhcmNoVHh0IDogYHRpdGxlPSR7bW92aWVJRH0mZGlyZWN0b3I9JHtkaXJlY3Rvcn0mbW92aWVTZXE9JHttb3ZpZVNlcX1gLCAKICAgICAgICAgICAgfTsKICAgICAgICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCdNT1ZJRV9JRCcsIHNlYXJjaFR4dEJveCk7CgogICAgICAgICAgICAvL2Nvb2tpZeyXkCDssqsg67KI7Ke4IGtleeygleuztCDsoIDsnqUuCiAgICAgICAgICAgIC8vICjquLDsobTsnZggYXBp6rWs7ZWY64qUIOy9lOuTnOyXkCDrhKPripQg7J247J6QIO2YleyLneqzvCDqsJnqsoztlZjquLAg7JyE7ZW0ICdrZXl3b3JkRmlyc3RCb3gn7IaN7JeQIHNlYXJjaFR4dOulvCDrhKPripQg67Cp7Iud7Jy866GcIOygnOyeke2VnCDqsoPsnoQuKQogICAgICAgICAgICBzYXZlRmlyc3RLZXkoYGtleXdvcmQ9JHtrZXl3b3JkfWApOwogICAgICAgICAgICBjb25zdCBrZXl3b3JkRmlyc3RCb3ggPSB7CiAgICAgICAgICAgICAgICBzZWFyY2hUeHQgOiBga2V5d29yZD0ke2tleXdvcmR9YCwgCiAgICAgICAgICAgICAgICBjaGVjayA6ICdrZXl3b3JkJywKICAgICAgICAgICAgfTsgCiAgICAgICAgICAgIAogICAgICAgICAgICAvLyDssqsg67KI7KiwIGtleeygleuztCDsnbTsmqntlbTshJwgYXBp6rWs7ZWoLgogICAgICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ1NJTUlMQVJfTU9WSUVfQVBJJywga2V5d29yZEZpcnN0Qm94KTsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIHRoaXMuJHN0b3JlLmNvbW1pdCgnQ0xJQ0tfTU9WSUUnLCBtb3ZpZSk7IAogICAgICAgICAgICB0aGlzLiRyb3V0ZXIucHVzaCgnL2luZm9ybScpOwogICAgICAgIH0KCiAgICB9Cgp9Cg=="},{"version":3,"sources":["MovieConts.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA","file":"MovieConts.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"movieConts\">\n    <button class=\"gomainBtn\" @click.prevent=\"goMain\">\n        <span class=\"arrow\">← </span> \n        <span class=\"text\"> 검색 페이지로</span>\n    </button>\n\n    <!-- 검색한 단어 출력 -->\n    <h2>{{ inputTextEdit(inputText) }}</h2>\n\n    <div class=\"movieNumBox\">\n        <p>총 {{ movieNum(moviedata.TotalCount) }}개의 영화가 검색되었습니다.</p>\n        <p>( 오른쪽으로 스크롤 하면 순서대로 모든 영화 목록을 볼 수 있습니다. )</p>\n    </div>\n\n    <div class=\"dataBox clear\">\n        <div class=\"movies clear\" v-if=\"movieResult\"> \n            <!-- v-if를 줘서 영화 데이터가 존재할 때만 영화 정보 박스(.movies)를 보이게 함. + movieResult속에 있는 데이터들 사용하려면 적어줘야함.(왜그런지는 모르겠다..) -->\n            <div \n                class=\"movieBox\"\n                v-for=\"(movie, index) in movieResult \" \n                v-bind:key=\"index\"\n            >\n                <div class=\"imgTitle\" @click=\"moveInform(keyWord(movie.keywords), textEdit(movie.title), textEdit(movie.directors.director[0].directorNm), movie.movieSeq)\">\n                    <img                     \n                        v-bind:src=\"posterURL(movie.posters)\" \n                        v-bind:alt=\"textEdit(movie.title)\"\n                    />\n\n                    <div class=\"hoverBox\">\n                        <!-- <p class=\"title\">{{ textEdit(movie.title) }}<br/>( {{ movie.prodYear }} )</p> -->\n                        <p class=\"director\">감독: {{ textEdit(movie.directors.director[0].directorNm) }}</p>\n                        <p class=\"story\" v-if=\"movie.plots.plot[0].plotText !== ''\">줄거리: {{ movie.plots.plot[0].plotText }}</p>\n                    </div>\n                </div>\n\n                <p class=\"title\">\n                    <span>{{ textEdit(movie.title) }}</span>\n                    <span class=\"year\">( {{ movie.prodYear }} )</span>\n                </p>\n            </div><!--.movieBox-->\n        </div><!--.movies-->\n\n        <p class=\"nodataTxt\" v-else>해당하는 영화가 없습니다.</p>\n    </div><!--.dataBox-->\n    \n    <br/><br/>\n    <!-- {{ moviedata }} -->\n  </div><!--.movieConts-->\n</template>\n\n<script>\nimport { eventbus } from '../main';\nimport { saveInform, saveFirstKey, saveLike } from '../utils/cookies';\n\nexport default {\n    computed: {\n        inputText() {\n            return this.$store.state.searchTxtBox.searchTxt;\n        },\n        moviedata() {\n            return this.$store.state.moviedata;\n        },\n        // dataInMoviedata() {\n        //     return this.moviedata.Data;\n        // },\n        movieResult() {\n            return this.$store.state.result;\n        },\n    },\n    created() {\n        // 이벤트버스로 mainConts에서 입력한 검색어 불러옴.\n        console.log('이벤트버스 이용해서 movie페이지에서 $on작동해야된다.');\n        \n        // eventbus.$on('sendSearch', (searchTxt, check) => {\n        //     console.log(searchTxt, check);\n        //     this.newMovie(searchTxt, check);\n        // })\n\n        // 이벤트버스 안되서 input페이지에서 바로 state에 넣어준 값 가져옴.\n        console.log(this.$store.state.searchTxtBox);\n        console.log(this.$store.state.searchTxtBox.check);\n        console.log(this.$store.state.searchTxtBox.searchTxt);\n        // const checkTxt = this.$store.state.searchTxt.check;\n        // const inputTxt = this.$store.state.searchTxt.searchTxt;\n\n        const searchTxtBox = this.$store.state.searchTxtBox;\n        this.$store.dispatch('FETCH_TITLE', searchTxtBox);\n\n \n        // MovieConts페이지 접속시마다 첫번째 키워드 빈칸으로 만들어줌.\n        saveFirstKey('');\n\n        // InfromConts를 벗어나면 cookie의 like와 movie_ID를 비워줌.\n        saveLike('');\n        saveInform('');\n    },\n    methods: {\n        // 입력한 검색어 추출.(영화type도 함께 들어있어 검색어만 뽑아냄)\n        inputTextEdit(text) {\n            return text.substring(text.indexOf('=')+1, text.length);\n        },\n        //movie검색 결과 개수가 총 100개 이상일 경우 개수안내표시를 100까지만 나타냄.\n        movieNum(num) {\n            if(num <= 100) return num;\n            else if(num > 100) return 100;\n        },\n        // poster url 편집.(url이 두개 이상일 경우 첫번째 url만 추출)\n        posterURL(url) {            \n            if(url === '') {   // url이 없을 경우\n                // poster url주소가 없을 경우 빈 이미지 추출.\n                return 'http://placehold.it/213x303';\n            }else if(url.indexOf('|') === -1) {   // url이 1개일 경우\n                return url;\n            }else if(url.indexOf('|')) {   // url이 2개 이상일 경우  \n                // poster url이 두개 이상일 경우 jpg의 마지막 글자인 g의 index순번만큼 주소 추출.\n                //  | <- 이 기호를 기준으로 했더니 url 주소가 하나일 경우 주소가 아예 사라져 버려서 jpg글자로 판단해주는 것으로 수정.\n                // return url.substring(0, url.indexOf(url.match(/g/i)) + 1); \n                // '|'로 기준을 바꿔줌. 대신 기존과 달리 3가지의 경우로 분류함. \n                return url.substring(0, url.indexOf('|')); \n            } \n        },\n        // title, name, genre 편집.\n        textEdit(text) {\n            // 검색어를 나타내는 !HE, !HS글자 삭제.\n            return text.replace(/!HE|!HS/g, '');\n        },\n        // 출연 배우가 많을 경우 5명까지만 추출하고 싶음.\n        // actorKey(actor) {\n        //     if(actor) \n        // },\n\n        // 다시 검색하기 버튼 클릭 시 main페이지로 이동.\n        goMain() {\n            this.$router.push('/main');\n        },\n        // keyword하나씩 넣어줌. + data의 keywordFirst에 첫 번째 키워드 넣어줌.\n        keyWord(key) {\n            console.log(key);\n            \n            if(key === '') return;\n            else if(key.indexOf(',') === -1) {\n                // this.keywordFirst = key;\n                return key;\n            }\n            else if(key.indexOf(',')) {\n                // this.keywordFirst = key.split(',')[0];\n                return key.split(',')[0];\n            }\n        },\n        // poster클릭 시 세부 정보 페이지(InformPage)로 이동.(해당 영화의 데이터들도 넘겨줌.)\n        moveInform(keyword, movieID, director, movieSeq) {\n            // InformConts가 새로고침해도 그대로 내용이 남아있도록 하기 위해서, 처음부터 title, director, movieSeq를 cookie와 store에 넘겨줘서 api생성할 수 있도록 한 것이다.\n            // title, director, movieSeq를 하나씩만 해봤더니 다른 영화가 연결되는 경우가 있어서 조건을 3개나 준 것.\n            saveInform(`title=${movieID}&director=${director}&movieSeq=${movieSeq}`);\n            console.log(this.$store.state.movieID);\n\n            const searchTxtBox = {\n                // searchTxt : `movieId=${movieID}`, \n                searchTxt : `title=${movieID}&director=${director}&movieSeq=${movieSeq}`, \n            };\n            this.$store.commit('MOVIE_ID', searchTxtBox);\n\n            //cookie에 첫 번째 key정보 저장.\n            // (기존의 api구하는 코드에 넣는 인자 형식과 같게하기 위해 'keywordFirstBox'속에 searchTxt를 넣는 방식으로 제작한 것임.)\n            saveFirstKey(`keyword=${keyword}`);\n            const keywordFirstBox = {\n                searchTxt : `keyword=${keyword}`, \n                check : 'keyword',\n            }; \n            \n            // 첫 번쨰 key정보 이용해서 api구함.\n            this.$store.commit('SIMILAR_MOVIE_API', keywordFirstBox);\n            \n            // this.$store.commit('CLICK_MOVIE', movie); \n            this.$router.push('/inform');\n        }\n\n    }\n\n}\n</script>\n\n<style scoped>\n\n</style>"]}]}