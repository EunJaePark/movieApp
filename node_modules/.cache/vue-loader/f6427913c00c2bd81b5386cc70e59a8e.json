{"remainingRequest":"/Users/eunjae/Desktop/github/movieApp_ej/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/eunjae/Desktop/github/movieApp_ej/src/components/MovieConts.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/eunjae/Desktop/github/movieApp_ej/src/components/MovieConts.vue","mtime":1591344340697},{"path":"/Users/eunjae/Desktop/github/movieApp_ej/node_modules/cache-loader/dist/cjs.js","mtime":1591071293823},{"path":"/Users/eunjae/Desktop/github/movieApp_ej/node_modules/babel-loader/lib/index.js","mtime":1591071293737},{"path":"/Users/eunjae/Desktop/github/movieApp_ej/node_modules/cache-loader/dist/cjs.js","mtime":1591071293823},{"path":"/Users/eunjae/Desktop/github/movieApp_ej/node_modules/vue-loader/lib/index.js","mtime":1591071296053}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IGV2ZW50YnVzIH0gZnJvbSAnLi4vbWFpbic7CgpleHBvcnQgZGVmYXVsdCB7CiAgICBjb21wdXRlZDogewogICAgICAgIG1vdmllZGF0YSgpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLm1vdmllZGF0YTsKICAgICAgICB9LAogICAgICAgIC8vIGRhdGFJbk1vdmllZGF0YSgpIHsKICAgICAgICAvLyAgICAgcmV0dXJuIHRoaXMubW92aWVkYXRhLkRhdGE7CiAgICAgICAgLy8gfSwKICAgICAgICBtb3ZpZVJlc3VsdCgpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLnJlc3VsdDsKICAgICAgICB9LAogICAgfSwKICAgIGNyZWF0ZWQoKSB7CiAgICAgICAgLy8g7J2067Kk7Yq467KE7Iqk66GcIG1haW5Db250c+yXkOyEnCDsnoXroKXtlZwg6rKA7IOJ7Ja0IOu2iOufrOyYtC4KICAgICAgICBjb25zb2xlLmxvZygn7J2067Kk7Yq467KE7IqkIOydtOyaqe2VtOyEnCBtb3ZpZe2OmOydtOyngOyXkOyEnCAkb27snpHrj5ntlbTslbzrkJzri6QuJyk7CiAgICAgICAgCiAgICAgICAgLy8gZXZlbnRidXMuJG9uKCdzZW5kU2VhcmNoJywgKHNlYXJjaFR4dCwgY2hlY2spID0+IHsKICAgICAgICAvLyAgICAgY29uc29sZS5sb2coc2VhcmNoVHh0LCBjaGVjayk7CiAgICAgICAgLy8gICAgIHRoaXMubmV3TW92aWUoc2VhcmNoVHh0LCBjaGVjayk7CiAgICAgICAgLy8gfSkKCiAgICAgICAgLy8g7J2067Kk7Yq467KE7IqkIOyViOuQmOyEnCBpbnB1dO2OmOydtOyngOyXkOyEnCDrsJTroZwgc3RhdGXsl5Ag64Sj7Ja07KSAIOqwkiDqsIDsoLjsmLQuCiAgICAgICAgY29uc29sZS5sb2codGhpcy4kc3RvcmUuc3RhdGUuc2VhcmNoVHh0Qm94KTsKICAgICAgICBjb25zb2xlLmxvZyh0aGlzLiRzdG9yZS5zdGF0ZS5zZWFyY2hUeHRCb3guY2hlY2spOwogICAgICAgIGNvbnNvbGUubG9nKHRoaXMuJHN0b3JlLnN0YXRlLnNlYXJjaFR4dEJveC5zZWFyY2hUeHQpOwogICAgICAgIC8vIGNvbnN0IGNoZWNrVHh0ID0gdGhpcy4kc3RvcmUuc3RhdGUuc2VhcmNoVHh0LmNoZWNrOwogICAgICAgIC8vIGNvbnN0IGlucHV0VHh0ID0gdGhpcy4kc3RvcmUuc3RhdGUuc2VhcmNoVHh0LnNlYXJjaFR4dDsKCiAgICAgICAgY29uc3Qgc2VhcmNoVHh0Qm94ID0gdGhpcy4kc3RvcmUuc3RhdGUuc2VhcmNoVHh0Qm94OwogICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdGRVRDSF9USVRMRScsIHNlYXJjaFR4dEJveCk7CgogICAgICAgIC8vIG1vdmllRGF0YSgpOwoKICAgIH0sCiAgICBtZXRob2RzOiB7CiAgICAgICAgLy9tb3ZpZeqygOyDiSDqsrDqs7wg6rCc7IiY6rCAIOy0nSAxMDDqsJwg7J207IOB7J28IOqyveyasCDqsJzsiJjslYjrgrTtkZzsi5zrpbwgMTAw6rmM7KeA66eMIOuCmO2DgOuDhC4KICAgICAgICBtb3ZpZU51bShudW0pIHsKICAgICAgICAgICAgaWYobnVtIDw9IDEwMCkgcmV0dXJuIG51bTsKICAgICAgICAgICAgZWxzZSBpZihudW0gPiAxMDApIHJldHVybiAxMDA7CiAgICAgICAgfSwKICAgICAgICAvLyBwb3N0ZXIgdXJsIO2OuOynkS4odXJs7J20IOuRkOqwnCDsnbTsg4Hsnbwg6rK97JqwIOyyq+uyiOynuCB1cmzrp4wg7LaU7LacKQogICAgICAgIHBvc3RlclVSTCh1cmwpIHsgICAgICAgICAgICAKICAgICAgICAgICAgaWYodXJsID09PSAnJykgeyAgIC8vIHVybOydtCDsl4bsnYQg6rK97JqwCiAgICAgICAgICAgICAgICAvLyBwb3N0ZXIgdXJs7KO87IaM6rCAIOyXhuydhCDqsr3smrAg67mIIOydtOuvuOyngCDstpTstpwuCiAgICAgICAgICAgICAgICByZXR1cm4gJ2h0dHA6Ly9wbGFjZWhvbGQuaXQvMjEzeDMwMyc7CiAgICAgICAgICAgIH1lbHNlIGlmKHVybC5pbmRleE9mKCd8JykgPT09IC0xKSB7ICAgLy8gdXJs7J20IDHqsJzsnbwg6rK97JqwCiAgICAgICAgICAgICAgICByZXR1cm4gdXJsOwogICAgICAgICAgICB9ZWxzZSBpZih1cmwuaW5kZXhPZignfCcpKSB7ICAgLy8gdXJs7J20IDLqsJwg7J207IOB7J28IOqyveyasCAgCiAgICAgICAgICAgICAgICAvLyBwb3N0ZXIgdXJs7J20IOuRkOqwnCDsnbTsg4Hsnbwg6rK97JqwIGpwZ+ydmCDrp4jsp4Drp4kg6riA7J6Q7J24IGfsnZggaW5kZXjsiJzrsojrp4ztgbwg7KO87IaMIOy2lOy2nC4KICAgICAgICAgICAgICAgIC8vICB8IDwtIOydtCDquLDtmLjrpbwg6riw7KSA7Jy866GcIO2WiOuNlOuLiCB1cmwg7KO87IaM6rCAIO2VmOuCmOydvCDqsr3smrAg7KO87IaM6rCAIOyVhOyYiCDsgqzrnbzsoLgg67KE66Ck7IScIGpwZ+q4gOyekOuhnCDtjJDri6jtlbTso7zripQg6rKD7Jy866GcIOyImOyglS4KICAgICAgICAgICAgICAgIC8vIHJldHVybiB1cmwuc3Vic3RyaW5nKDAsIHVybC5pbmRleE9mKHVybC5tYXRjaCgvZy9pKSkgKyAxKTsgCiAgICAgICAgICAgICAgICAvLyAnfCfroZwg6riw7KSA7J2EIOuwlOq/lOykjC4g64yA7IugIOq4sOyhtOqzvCDri6zrpqwgM+qwgOyngOydmCDqsr3smrDroZwg67aE66WY7ZWoLiAKICAgICAgICAgICAgICAgIHJldHVybiB1cmwuc3Vic3RyaW5nKDAsIHVybC5pbmRleE9mKCd8JykpOyAKICAgICAgICAgICAgfSAKICAgICAgICB9LAogICAgICAgIC8vIHRpdGxlLCBuYW1lLCBnZW5yZSDtjrjsp5EuCiAgICAgICAgdGV4dEVkaXQodGV4dCkgewogICAgICAgICAgICAvLyDqsoDsg4nslrTrpbwg64KY7YOA64K064qUICFIRSwgIUhT6riA7J6QIOyCreygnC4KICAgICAgICAgICAgcmV0dXJuIHRleHQucmVwbGFjZSgvIUhFfCFIUy9nLCAnJyk7CiAgICAgICAgfSwKICAgICAgICAvLyDstpzsl7Ag67Cw7Jqw6rCAIOunjuydhCDqsr3smrAgNeuqheq5jOyngOunjCDstpTstpztlZjqs6Ag7Iu27J2MLgogICAgICAgIC8vIGFjdG9yS2V5KGFjdG9yKSB7CiAgICAgICAgLy8gICAgIGlmKGFjdG9yKSAKICAgICAgICAvLyB9LAoKICAgICAgICAvLyDri6Tsi5wg6rKA7IOJ7ZWY6riwIOuyhO2KvCDtgbTrpq0g7IucIG1haW7tjpjsnbTsp4DroZwg7J2064+ZLgogICAgICAgIGdvTWFpbigpIHsKICAgICAgICAgICAgdGhpcy4kcm91dGVyLnB1c2goJy9tYWluJyk7CiAgICAgICAgfSwKICAgICAgICAvLyBwb3N0ZXLtgbTrpq0g7IucIOyEuOu2gCDsoJXrs7Qg7Y6Y7J207KeAKEluZm9ybVBhZ2Up66GcIOydtOuPmS4KICAgICAgICBtb3ZlSW5mb3JtKG1vdmllKSB7CiAgICAgICAgICAgIHRoaXMuJHN0b3JlLmNvbW1pdCgnQ0xJQ0tfTU9WSUUnLCBtb3ZpZSk7CiAgICAgICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKCcvaW5mb3JtJyk7CiAgICAgICAgfQoKICAgICAgICAvLyBtb3ZpZWRhdGEoKSB7CiAgICAgICAgLy8gICAgIHRoaXMuJHN0b3JlLnN0YXRlLnJlc3VsdDsKICAgICAgICAgICAgCiAgICAgICAgLy8gICAgIC8vIOuNsOydtO2EsOunjOuTpOyWtOyEnCDqt7gg7J2066aEIOyViOyXkCDsnbQg6rCS7J2EIOykmOuztOyekC4KICAgICAgICAvLyB9LAogICAgICAgIC8vIHNwYeuhnCDsoJzsnpHtlZjroKTri4gg7JyE7J2YIGNyZWF0ZWTsl5DshJwg7J2067Kk7Yq467KE7Iqk66GcIOuwm+yVhOyYpOuKlOqyjCDsnpHrj5nsnbQg7JWI65CY7Ja07IScLCDslYTsmIgg7J2067Kk7Yq467KE7Iqk66W8IOyCrOyaqe2VmOyngCDslYrsnYwuCiAgICAgICAgLy8g65Sw65287IScLCDslYTrnpjsnZggbmV3TW92aWUoKe2VqOyImCDso7zshJ3sspjrpqwg7ZWcIOqygy4KCiAgICAgICAgLy8gbmV3TW92aWUoc2VhcmNoVHh0LCBjaGVjaykgewogICAgICAgIC8vICAgICBjb25zb2xlLmxvZyhzZWFyY2hUeHQsIGNoZWNrKTsKICAgICAgICAgICAgCiAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKCfsmIHtmZQg6rKA7IOJ7Ja0IOuwm+yVmOuLpCEhISEnKTsKICAgICAgICAvLyAgICAgY29uc3QgdHh0Q2hlY2sgPSB7c2VhcmNoVHh0LCBjaGVja307CiAgICAgICAgLy8gICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdGRVRDSF9USVRMRScsIHR4dENoZWNrKQogICAgICAgIC8vIH0KICAgIH0KCiAgICAvLyBjcmVhdGVkKCkgewogICAgLy8gICAgIGF4aW9zCiAgICAvLyAgICAgLmdldCgnIGh0dHA6Ly9hcGkua29yZWFmaWxtLm9yLmtyL29wZW5hcGktZGF0YTIvd2lzZW51dC9zZWFyY2hfYXBpL3NlYXJjaF94bWwyLmpzcD9jb2xsZWN0aW9uPWttZGJfbmV3MiZkZXRhaWw9TiZkaXJlY3Q9JUVCJUIwJTk1JUVDJUIwJUFDJUVDJTlBJUIxJlNlcnZpY2VLZXk9TTFOVjFCMTEwMUhaMzI4MlRSUFcnKQogICAgLy8gICAgIC50aGVuKHJlcyA9PiB7CiAgICAvLyAgICAgICAgIHRoaXMubW92aWVEYXRhID0gcmVzLmRhdGE7CiAgICAvLyAgICAgfSk7CiAgICAvLyB9Cn0K"},{"version":3,"sources":["MovieConts.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"MovieConts.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"movieConts\">\n    <button class=\"gomainBtn\" @click.prevent=\"goMain\">\n        <span class=\"arrow\">← </span> \n        <span class=\"text\"> 검색 페이지로</span>\n    </button>\n      <!-- 검색한 단어 출력 -->\n    <h2>{{ moviedata.KMAQuery }}</h2>\n    <div class=\"movieNumBox\">\n        <p>총 {{ movieNum(moviedata.TotalCount) }}개의 영화가 검색되었습니다.</p>\n        <p>( 오른쪽으로 스크롤 하면 순서대로 모든 영화 목록을 볼 수 있습니다. )</p>\n    </div>\n\n    <div class=\"dataBox clear\">\n        <div class=\"movies clear\" v-if=\"movieResult\"> \n            <!-- v-if를 줘서 영화 데이터가 존재할 때만 영화 정보 박스(.movies)를 보이게 함. + movieResult속에 있는 데이터들 사용하려면 적어줘야함.(왜그런지는 모르겠다..) -->\n            <div \n                class=\"movieBox\"\n                v-for=\"(movie, index) in movieResult \" \n                v-bind:key=\"index\"\n            >\n                <div class=\"imgTitle\" @click=\"moveInform(movie)\">\n                    <img                     \n                        v-bind:src=\"posterURL(movie.posters)\" \n                        v-bind:alt=\"textEdit(movie.title)\"\n                    />\n\n                    <div class=\"hoverBox\">\n                        <!-- <p class=\"title\">{{ textEdit(movie.title) }}<br/>( {{ movie.prodYear }} )</p> -->\n                        <p class=\"director\">감독: {{ textEdit(movie.directors.director[0].directorNm) }}</p>\n                        <p class=\"story\" v-if=\"movie.plots.plot[0].plotText !== ''\">줄거리: {{ movie.plots.plot[0].plotText }}</p>\n                    </div>\n                </div>\n\n                <p class=\"title\">\n                    <span>{{ textEdit(movie.title) }}</span>\n                    <span class=\"year\">( {{ movie.prodYear }} )</span>\n                </p>\n            </div><!--.movieBox-->\n        </div><!--.movies-->\n\n        <p class=\"nodataTxt\" v-else>해당하는 영화가 없습니다.</p>\n    </div><!--.dataBox-->\n    \n    <br/><br/>\n    <!-- {{ moviedata }} -->\n  </div><!--.movieConts-->\n</template>\n\n<script>\nimport { eventbus } from '../main';\n\nexport default {\n    computed: {\n        moviedata() {\n            return this.$store.state.moviedata;\n        },\n        // dataInMoviedata() {\n        //     return this.moviedata.Data;\n        // },\n        movieResult() {\n            return this.$store.state.result;\n        },\n    },\n    created() {\n        // 이벤트버스로 mainConts에서 입력한 검색어 불러옴.\n        console.log('이벤트버스 이용해서 movie페이지에서 $on작동해야된다.');\n        \n        // eventbus.$on('sendSearch', (searchTxt, check) => {\n        //     console.log(searchTxt, check);\n        //     this.newMovie(searchTxt, check);\n        // })\n\n        // 이벤트버스 안되서 input페이지에서 바로 state에 넣어준 값 가져옴.\n        console.log(this.$store.state.searchTxtBox);\n        console.log(this.$store.state.searchTxtBox.check);\n        console.log(this.$store.state.searchTxtBox.searchTxt);\n        // const checkTxt = this.$store.state.searchTxt.check;\n        // const inputTxt = this.$store.state.searchTxt.searchTxt;\n\n        const searchTxtBox = this.$store.state.searchTxtBox;\n        this.$store.dispatch('FETCH_TITLE', searchTxtBox);\n\n        // movieData();\n\n    },\n    methods: {\n        //movie검색 결과 개수가 총 100개 이상일 경우 개수안내표시를 100까지만 나타냄.\n        movieNum(num) {\n            if(num <= 100) return num;\n            else if(num > 100) return 100;\n        },\n        // poster url 편집.(url이 두개 이상일 경우 첫번째 url만 추출)\n        posterURL(url) {            \n            if(url === '') {   // url이 없을 경우\n                // poster url주소가 없을 경우 빈 이미지 추출.\n                return 'http://placehold.it/213x303';\n            }else if(url.indexOf('|') === -1) {   // url이 1개일 경우\n                return url;\n            }else if(url.indexOf('|')) {   // url이 2개 이상일 경우  \n                // poster url이 두개 이상일 경우 jpg의 마지막 글자인 g의 index순번만큼 주소 추출.\n                //  | <- 이 기호를 기준으로 했더니 url 주소가 하나일 경우 주소가 아예 사라져 버려서 jpg글자로 판단해주는 것으로 수정.\n                // return url.substring(0, url.indexOf(url.match(/g/i)) + 1); \n                // '|'로 기준을 바꿔줌. 대신 기존과 달리 3가지의 경우로 분류함. \n                return url.substring(0, url.indexOf('|')); \n            } \n        },\n        // title, name, genre 편집.\n        textEdit(text) {\n            // 검색어를 나타내는 !HE, !HS글자 삭제.\n            return text.replace(/!HE|!HS/g, '');\n        },\n        // 출연 배우가 많을 경우 5명까지만 추출하고 싶음.\n        // actorKey(actor) {\n        //     if(actor) \n        // },\n\n        // 다시 검색하기 버튼 클릭 시 main페이지로 이동.\n        goMain() {\n            this.$router.push('/main');\n        },\n        // poster클릭 시 세부 정보 페이지(InformPage)로 이동.\n        moveInform(movie) {\n            this.$store.commit('CLICK_MOVIE', movie);\n            this.$router.push('/inform');\n        }\n\n        // moviedata() {\n        //     this.$store.state.result;\n            \n        //     // 데이터만들어서 그 이름 안에 이 값을 줘보자.\n        // },\n        // spa로 제작하려니 위의 created에서 이벤트버스로 받아오는게 작동이 안되어서, 아예 이벤트버스를 사용하지 않음.\n        // 따라서, 아래의 newMovie()함수 주석처리 한 것.\n\n        // newMovie(searchTxt, check) {\n        //     console.log(searchTxt, check);\n            \n        //     console.log('영화 검색어 받았다!!!!');\n        //     const txtCheck = {searchTxt, check};\n        //     this.$store.dispatch('FETCH_TITLE', txtCheck)\n        // }\n    }\n\n    // created() {\n    //     axios\n    //     .get(' http://api.koreafilm.or.kr/openapi-data2/wisenut/search_api/search_xml2.jsp?collection=kmdb_new2&detail=N&direct=%EB%B0%95%EC%B0%AC%EC%9A%B1&ServiceKey=M1NV1B1101HZ3282TRPW')\n    //     .then(res => {\n    //         this.movieData = res.data;\n    //     });\n    // }\n}\n</script>\n\n<style scoped>\n\n</style>"]}]}