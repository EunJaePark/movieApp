{"remainingRequest":"/Users/eunjae/Desktop/github/movieApp/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/eunjae/Desktop/github/movieApp/src/components/MovieConts.vue?vue&type=style&index=0&id=ac0ac03e&scoped=true&lang=css&","dependencies":[{"path":"/Users/eunjae/Desktop/github/movieApp/src/components/MovieConts.vue","mtime":1590660097555},{"path":"/Users/eunjae/Desktop/github/movieApp/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eunjae/Desktop/github/movieApp/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/eunjae/Desktop/github/movieApp/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/eunjae/Desktop/github/movieApp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eunjae/Desktop/github/movieApp/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouaW1nVGl0bGUgPiBpbWd7IHdpZHRoOjIxM3B4OyBoZWlnaHQ6MzAzcHg7IH0K"},{"version":3,"sources":["MovieConts.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkJA","file":"MovieConts.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"movieConts\">\n      <!-- 검색한 단어 출력 -->\n    <h2>\" {{ moviedata.KMAQuery }} \"</h2>\n\n    <div class=\"dataBox clear\">\n        <div class=\"movies\" v-if=\"dataInMoviedata\">  <!--  v-if는 없어도 될듯. -->\n            <div \n                class=\"movieBox\"\n                v-for=\"movie in movieResult \" v-bind:key=\"movie.DOCID\">\n                <div class=\"imgTitle\">\n                    <img                     \n                        v-bind:src=\"posterURL(movie.posters)\" \n                        v-bind:alt=\"textEdit(movie.title)\"/>\n\n                    <!-- title의 불필요한 글자 삭제해줌. -->\n                    <!-- <p>제목: {{ movie.title.replace(/!HS|!HE/g, '') }}</p> -->\n                    <p>제목: {{ textEdit(movie.title) }} ( {{ movie.prodYear }} )</p>\n                </div>\n\n                <ul class=\"textData\">\n                    <li v-if=\"movie.genre !== ''\">장르: {{ movie.genre }}</li>\n                    <li v-if=\"movie.directors.director[0].directorNm !== ''\">감독: {{ textEdit(movie.directors.director[0].directorNm) }}</li>\n                    <li v-if=\"movie.actors.actor[0].actorNm !== ''\">배우: \n                        <span \n                            v-for=\"actorName in movie.actors.actor\" \n                            v-bind:key=\"actorName.actorId\">\n                                {{ actorName.actorNm }}, \n                            </span> \n                    </li>\n                    <li v-if=\"movie.plots.plot[0].plotText !== ''\">줄거리: {{ movie.plots.plot[0].plotText }}</li>\n                    <li><a v-bind:href=\"movie.kmdbUrl\" target=\"blanket\">상세정보</a></li>\n                </ul>\n\n\n                    <br/><br/>\n                    - 영화 포스터 주소 전체\n                    {{ movie.posters }} \n                    <br/><br/>\n                    - 영화 포스터 여러개의 주소가 있을 경우 처음 주소만 추출.('g'철자로 자름.)\n                    {{ movie.posters.substring(0, movie.posters.indexOf(movie.posters.match(/g/i)) + 1) }}\n                    <br/><br/>\n                    - 영화 포스터 여러개의 주소가 있을 경우 처음 주소만 추출.('|'기호로 자름.)\n                    {{ posterURL(movie.posters) }}\n                    <br/><br/>\n            </div><!--.movieBox-->\n        </div><!--.movies-->\n    </div><!--.dataBox-->\n    \n    <br/><br/>\n\n    {{ moviedata }}\n  </div><!--.movieConts-->\n</template>\n\n<script>\nimport { eventbus } from '../main';\n\nexport default {\n    computed: {\n        moviedata() {\n            return this.$store.state.moviedata;\n        },\n        dataInMoviedata() {\n            return this.moviedata.Data;\n        },\n        movieResult() {\n            return this.$store.state.result;\n        },\n    },\n    created() {\n        // 이벤트버스로 mainConts에서 입력한 검색어 불러옴.\n        console.log('이벤트버스 이용해서 movie페이지에서 $on작동해야된다.');\n        \n        // eventbus.$on('sendSearch', (searchTxt, check) => {\n        //     console.log(searchTxt, check);\n        //     this.newMovie(searchTxt, check);\n        // })\n\n        // 이벤트버스 안되서 input페이지에서 바로 state에 넣어준 값 가져옴.\n        console.log(this.$store.state.searchTxt);\n        console.log(this.$store.state.searchTxt.check);\n        console.log(this.$store.state.searchTxt.searchTxt);\n        // const checkTxt = this.$store.state.searchTxt.check;\n        // const inputTxt = this.$store.state.searchTxt.searchTxt;\n\n        const searchTxt = this.$store.state.searchTxt;\n        this.$store.dispatch('FETCH_TITLE', searchTxt);\n\n        // movieData();\n\n    },\n    methods: {\n        // poster url 편집.(url이 두개 이상일 경우 첫번째 url만 추출)\n        posterURL(url) {            \n            if(!url.indexOf('|')) {   // url이 1개일 경우\n                return url;\n            } else if(url.indexOf('|')) {   // url이 2개 이상일 경우  \n                // poster url이 두개 이상일 경우 jpg의 마지막 글자인 g의 index순번만큼 주소 추출.\n                //  | <- 이 기호를 기준으로 했더니 url 주소가 하나일 경우 주소가 아예 사라져 버려서 jpg글자로 판단해주는 것으로 수정.\n                // return url.substring(0, url.indexOf(url.match(/g/i)) + 1); \n                // '|'로 기준을 바꿔줌. 대신 기존과 달리 3가지의 경우로 분류함. \n                return url.substring(0, url.indexOf('|')); \n            } else if(url.indexOf('http') === -1) {   // url이 없을 경우\n                // poster url주소가 없을 경우 빈 이미지 추출.\n                return 'http://placehold.it/213x303'\n            }\n        },\n        // title, name, genre 편집.\n        textEdit(text) {\n            // 검색어를 나타내는 !HE, !HS글자 삭제.\n            return text.replace(/!HE|!HS/g, '');\n        },\n        // 출연 배우가 많을 경우 5명까지만 추출하고 싶음.\n        // actorKey(actor) {\n        //     if(actor) \n        // },\n\n        // moviedata() {\n        //     this.$store.state.result;\n            \n        //     // 데이터만들어서 그 이름 안에 이 값을 줘보자.\n        // },\n        // spa로 제작하려니 위의 created에서 이벤트버스로 받아오는게 작동이 안되어서, 아예 이벤트버스를 사용하지 않음.\n        // 따라서, 아래의 newMovie()함수 주석처리 한 것.\n\n        // newMovie(searchTxt, check) {\n        //     console.log(searchTxt, check);\n            \n        //     console.log('영화 검색어 받았다!!!!');\n        //     const txtCheck = {searchTxt, check};\n        //     this.$store.dispatch('FETCH_TITLE', txtCheck)\n        // }\n    }\n\n    // created() {\n    //     axios\n    //     .get(' http://api.koreafilm.or.kr/openapi-data2/wisenut/search_api/search_xml2.jsp?collection=kmdb_new2&detail=N&direct=%EB%B0%95%EC%B0%AC%EC%9A%B1&ServiceKey=M1NV1B1101HZ3282TRPW')\n    //     .then(res => {\n    //         this.movieData = res.data;\n    //     });\n    // }\n}\n</script>\n\n<style scoped>\n.imgTitle > img{ width:213px; height:303px; }\n</style>"]}]}