{"remainingRequest":"/Users/eunjae/Desktop/github/movieApp_ej/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/eunjae/Desktop/github/movieApp_ej/src/components/InformConts.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/eunjae/Desktop/github/movieApp_ej/src/components/InformConts.vue","mtime":1592497802506},{"path":"/Users/eunjae/Desktop/github/movieApp_ej/node_modules/cache-loader/dist/cjs.js","mtime":1591071293823},{"path":"/Users/eunjae/Desktop/github/movieApp_ej/node_modules/babel-loader/lib/index.js","mtime":1591071293737},{"path":"/Users/eunjae/Desktop/github/movieApp_ej/node_modules/cache-loader/dist/cjs.js","mtime":1591071293823},{"path":"/Users/eunjae/Desktop/github/movieApp_ej/node_modules/vue-loader/lib/index.js","mtime":1591071296053}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IHNhdmVWYWx1ZSwgc2F2ZVR5cGUsIGRlbGV0ZUNvb2tpZSwgc2F2ZUZpcnN0S2V5LCBzYXZlTGlrZSwgZ2V0TGlrZSwgc2F2ZUxpa2VQb2NrZXQsIGdldExpa2VQb2NrZXQsIGdldElERnJvbUNvb2tpZSB9IGZyb20gJy4uL3V0aWxzL2Nvb2tpZXMnOwoKZXhwb3J0IGRlZmF1bHQgewogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBpbWdJbmRleDogMCwKICAgICAga2V5d29yZEluZGV4OiAwLAogICAgICBzZWFyY2hUZXh0OiAnJywKICAgICAga2V5OiAnJywgLy8g7YKk7JuM65OcIOykkSDssqsg67KI7Ke466eMIOy2lOy2nC4oU2ltaWxhck1vdmllLnZ1ZeuhnCDsoITri6ztlaAg6rKDKQogICAgICBhY3RvcnM6IDEwLCAvLyDrsLDsmrAg67aI65+s7Jik64qUIOyImC4o642U67O06riwIOuyhO2KvCDtgbTrpq3si5wg7KCE7LK0IOuwsOyasCDsiJjrp4ztgbwg7Iir7J6QIOuKmOyWtOuCqCkKICAgICAgYWN0b3JzQWxsQ2hlY2s6ICdubycsCiAgICAgIGFjdG9yc0J0blRleHQ6ICfrjZTrs7TquLAnLAogICAgICBsaWtlQ2hlY2s6ICcnLAogICAgfQogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIGNsaWNrTW92aWVEYXRhKCkgewogICAgICAvLyByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuY2xpY2tNb3ZpZTsKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLm1vdmllZGF0YTsKICAgIH0sCiAgICBnZXRDb29raWVMaWtlKCkgewogICAgICByZXR1cm4gZ2V0TGlrZSgpOwogICAgfSwKICB9LAogIGNyZWF0ZWQoKSB7ICAgCiAgICBjb25zb2xlLmxvZyh0aGlzLiRzdG9yZS5zdGF0ZS5tb3ZpZUlEKTsKICAgIAogICAgLy8g7JiB7ZmUIOyDgeyEuOygleuztCDrtojrn6zsmLQuKGNvb2tpZeydtOyaqe2VtOyEnCBhcGnrp4zrk6TslrTshJwg6rCA7KC47JisIOqyg+yehC4pCiAgICBjb25zdCBpZEFQSSA9IHRoaXMuJHN0b3JlLnN0YXRlLm1vdmllSUQ7CiAgICBjb25zb2xlLmxvZyhpZEFQSSk7CiAgICAKICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdGRVRDSF9USVRMRScsIGlkQVBJKTsKCgogICAgLy8gLy8gY29va2ll7J2YIGxpa2XsmYAgbW92aWVfSUQg64K07Jqp7J2EIO2ZleyduO2VtOyEnCDsoovslYTsmpQg67KE7Yq8IO2ZnOyFqe2ZlCDsnKDrrLQg7YyQ64uoLgogICAgLy8gY29uc29sZS5sb2coJ2xpa2XtmZXsnbghISEnKTsKICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuZ2V0Q29va2llTGlrZSk7CiAgICAKICAgIC8vIHRoaXMubGlrZUNoZWNrID0gdGhpcy5nZXRDb29raWVMaWtlOwogICAgLy8gY29uc29sZS5sb2codGhpcy5saWtlQ2hlY2spOwoKCiAgICAvLyBjb29raWXsnZggbGlrZVBvY2tldOyXkCDsmIHtmZTsoJXrs7TqsIAg7J6I7Jy866m0IGRhdGHsnZggbGlrZUNoZWNr66W8IHRydWXroZwg7ZW07KSMLijtjpjsnbTsp4Ag66Gc65Sp7IucIC0g7KaJLCDri6Trpbgg7Y6Y7J207KeAIOqwlOuLpOqwgCDri6Tsi5wg65Ok7Ja07JmA64+EIOq3uOuMgOuhnCDquLDroZ3snbQg64Ko7JWE7J6I64+E66GdIO2VtOyjvOuKlCDqsoMuKQogICAgbGV0IGdldE1vdmllSUQgPSBnZXRJREZyb21Db29raWUoKTsgICAvLyBNb3ZpZUNvbnRz7JeQ7IScIO2PrOyKpO2EsCDtgbTrpq0g7IucIGNvb2tpZeuhnCDrhJjqsqjspIAg7J20IOyYge2ZlCDsoJXrs7Qg6rCA7KC47Ji0LgogICAgbGV0IGdldExpa2UgPSBnZXRMaWtlUG9ja2V0KCk7IC8vIGNvb2tpZeyXkCDsnojripQgbGlrZVBvY2tldCDrgrTsmqkg6rCA7KC47Ji0LgogICAgbGV0IGxpa2VQS2RpdiA9IGdldExpa2Uuc3BsaXQoJ1snKTsgLy8gbGlrZVBvY2tldOydmCDrgrTsmqnrk6Qo6rCd7LK07ZmU7Iuc7YK0KeydhCDrsLDsl7TroZwg67CU6r+U7KSMLgoKICAgIGNvbnNvbGUubG9nKGdldE1vdmllSUQucmVwbGFjZSgvKFxzKikvZywgJycpKTsgICAgCgogICAgZm9yKGxldCBpID0gMTsgaSA8IGxpa2VQS2Rpdi5sZW5ndGg7IGkrKykgewogICAgICBsZXQgZ2V0TGlrZURpdiA9IGxpa2VQS2RpdltpXS5yZXBsYWNlKC9bXHtcfVxdXS9nLCAnJykuc3BsaXQoJyInKVszXTsgLy8g44WjbGlrZVBvY2tldOyXkCDrk6TslrTsnojripQg7JiB7ZmU7KCV67O065OkIOydvOydvO2eiCDruYTqtZDtlZjquLDsnITtlbQg7JiB7ZmU7KCV67O066eMIOu2hOumrOyLnO2CtC4obGlrZeygleuztOuPhCDtlajqu5gg7J6I7JeI6riwIOuVjOusuC4pCiAgICAgIGNvbnNvbGUubG9nKGdldExpa2VEaXYucmVwbGFjZSgvKFxzKikvZywgJycpKTsKICAgICAgbGV0IGxpa2UgPSBsaWtlUEtkaXZbaV0ucmVwbGFjZSgvW1x7XH1cXV0vZywgJycpLnNwbGl0KCciJylbN107CiAgICAgIGNvbnNvbGUubG9nKGxpa2UpOwogICAgICAKICAgICAgCiAgICAgIC8vIGdldE1vdmllSUTsmYAgZ2V0TGlrZURpduydmCDqs7XrsLEg7IiY6rCAIOuLrOudvOyEnCDslYTsmIgg6rO167Cx7J2EIOyXhuyVoOyEnCDruYTqtZDtlbTspIwuCiAgICAgIGlmKGdldExpa2VEaXYucmVwbGFjZSgvKFxzKikvZywgJycpID09PSBnZXRNb3ZpZUlELnJlcGxhY2UoLyhccyopL2csICcnKSkgeyAvLyDtmITsnqwg7IOB7IS47Y6Y7J207KeA7J2YIOyYge2ZlOqwgCBsaWtlUG9ja2V07JeQIOyeiOycvOuptCDsoovslYTsmpQg67KE7Yq8IHRydWXroZwg7KSMLgogICAgICAgIGNvbnNvbGUubG9nKCfsoovslYTsmpQg7Y+s7LyT7JeQIOydtCDsmIHtmZQg7J6I64ukLicpOwogICAgICAgIHRoaXMubGlrZUNoZWNrID0gbGlrZTsKICAgICAgICBicmVhazsKICAgICAgfSBlbHNlIHsKICAgICAgICBjb25zb2xlLmxvZygn7KKL7JWE7JqUIO2PrOy8k+yXkCDsnbQg7JiB7ZmUIOyXhuyKteuLiOuLpC4uJyk7CiAgICAgICAgCiAgICAgICAgdGhpcy5saWtlQ2hlY2sgPSAnZmFsc2UnOwogICAgICB9CiAgICB9CiAgICAKICAgIAoKICAgIAogIH0sCiAgLy8g66mU7ISc65Oc7J2YIGFjdG9yTnVt7J2EIOyLpO2WieyLnO2CpOq4sCDsnITtlbTshJwgYmVmb3JlVXBkYXRlZOulvCDsnpHshLHtlbTspIAg6rKD7J207JeI64qU642wLCDsl4bslrTrj4Qg7JWM7JWE7IScIOyekeuPmeuQnOuLpC4g7YOc6re47JeQIHYtZm9y66GcIOuEo+yWtOykrOuNlOuLiC4KICAvLyBiZWZvcmVVcGRhdGVkKCl7CiAgLy8gICBjb25zb2xlLmxvZygnYWN0b3JudW3si6TtlontlbTrnbx+ficpOwogICAgCiAgLy8gICB0aGlzLmFjdG9yTnVtKCk7CiAgLy8gfSwKICBtZXRob2RzOiB7CiAgICB0ZXh0RWRpdCh0ZXh0KSB7CiAgICAgIC8vIOqygOyDieyWtOulvCDrgpjtg4DrgrTripQgIUhFLCAhSFPquIDsnpAg7IKt7KCcLgogICAgICByZXR1cm4gdGV4dC5yZXBsYWNlKC8hSEV8IUhTL2csICcnKTsKICAgIH0sCiAgICBwb3N0ZXJVUkwodXJsKSB7ICAgICAgICAgICAgCiAgICAgIGlmKHVybCA9PT0gJycpIHsgICAvLyB1cmzsnbQg7JeG7J2EIOqyveyasAogICAgICAgIC8vIHBvc3RlciB1cmzso7zshozqsIAg7JeG7J2EIOqyveyasCDruYgg7J2066+47KeAIOy2lOy2nC4KICAgICAgICByZXR1cm4gJ2h0dHA6Ly9wbGFjZWhvbGQuaXQvMjEzeDMwMyc7CiAgICAgIH1lbHNlIGlmKHVybC5pbmRleE9mKCd8JykgPT09IC0xKSB7ICAgLy8gdXJs7J20IDHqsJzsnbwg6rK97JqwCiAgICAgICAgcmV0dXJuIHVybDsKICAgICAgfWVsc2UgaWYodXJsLmluZGV4T2YoJ3wnKSkgeyAgIC8vIHVybOydtCAy6rCcIOydtOyDgeydvCDqsr3smrAgIAogICAgICAgIHJldHVybiB1cmwuc3Vic3RyaW5nKDAsIHVybC5pbmRleE9mKCd8JykpOyAKICAgICAgfSAKICAgIH0sCiAgICAvLyDsmIHtmZQg6rCc67SJ7J287J6QIO2OuOynkS4KICAgIGRhdGVFZGl0KGRhdGUpIHsKICAgICAgcmV0dXJuIGRhdGUucmVwbGFjZSgvKFxkezR9KShcZHsyfSkoXGR7Mn0pLywgJyQxLiQyLiQzJyk7CiAgICAgIC8vIFxkIDog7Iir7J6QIOusuOyekOqwgCDslYTri4wg66y47J6Q7JeQIOuMgOydkeuQnOuLpC4gW14wLTld7JmAIOuPmeydvO2VmOuLpC4KICAgICAgLy8ge259IDog7JWeIO2RnO2YhOyLneydtCBu67KIIOuCmO2DgOuCmOuKlCDrtoDrtoTsl5Ag64yA7J2R65Cc64ukLiBu7J2AIOuwmOuTnOyLnCDslpHsnZgg7KCV7IiY7Jes7JW8IO2VnOuLpC4KICAgICAgLy8g7KaJLCBcZHs0feuKlCDslZ7sl5DshJwgNOuyiOynuOq5jOyngOydmCBbMC05Xeq5jOyngCDtlbTri7ntlZjripQg7Iir7J6Q66W8IOyngOy5re2VmOqyjCDrkJjripQg6rKD7J2064ukLgogICAgfSwKICAgIC8vIOykhOqxsOumrCDspJEg7KCc7J28IOyVniDrrLjsnqXrp4wg7LaU7LacLgogICAgc2xvZ2FuRWRpdChzdG9yeSkgewogICAgICByZXR1cm4gc3Rvcnkuc3Vic3RyaW5nKDAsIHN0b3J5LmluZGV4T2YoJyEnKSsxKTsKICAgIH0sCiAgICAvLyDspITqsbDrpqwg7KSRIOygnOydvCDslZ4g66y47J6lIOygnOyZuO2VnCDrgpjrqLjsp4Ag66qo65OgIOykhOqxsOumrCDstpTstpwuCiAgICBzdG9yeUVkaXQoc3RvcnkpIHsKICAgICAgcmV0dXJuIHN0b3J5LnN1YnN0cmluZyhzdG9yeS5pbmRleE9mKCchJykrMSwgc3RvcnkubGVuZ3RoKQogICAgfSwKICAgIC8vIGtleXdvcmQg6rCc7IiYIOq1rO2VqC4KICAgIGtleXdvcmROdW0oa2V5KSB7CiAgICAgIGlmKGtleSA9PT0gJycpIHsKICAgICAgICByZXR1cm4gdGhpcy5rZXl3b3JkSW5kZXggPSAwOwogICAgICB9IGVsc2UgaWYoa2V5LmluZGV4T2YoJywnKSA9PT0gLTEpIHsKICAgICAgICByZXR1cm4gdGhpcy5rZXl3b3JkSW5kZXggPSAxOwogICAgICB9IGVsc2UgaWYoa2V5LmluZGV4T2YoJywnKSkgewogICAgICAgIHJldHVybiB0aGlzLmtleXdvcmRJbmRleCA9IGtleS5tYXRjaCgvLC9nKS5sZW5ndGggKyAxOwogICAgICB9IAogICAgfSwKICAgIC8vIGtleXdvcmTtlZjrgpjslKkg64Sj7Ja07KSMLiArIGRhdGHsnZgga2V5d29yZEZpcnN07JeQIOyyqyDrsojsp7gg7YKk7JuM65OcIOuEo+yWtOykjC4KICAgIGtleVdvcmQoa2V5LCBpbmRleCkgewogICAgICBpZihrZXkgPT09ICcnKSByZXR1cm47CiAgICAgIGVsc2UgaWYoa2V5LmluZGV4T2YoJywnKSA9PT0gLTEpIHsKICAgICAgICAvLyB0aGlzLmtleXdvcmRGaXJzdCA9IGtleTsKICAgICAgICByZXR1cm4ga2V5OwogICAgICB9CiAgICAgIGVsc2UgaWYoa2V5LmluZGV4T2YoJywnKSkgewogICAgICAgIC8vIHRoaXMua2V5d29yZEZpcnN0ID0ga2V5LnNwbGl0KCcsJylbMF07CiAgICAgICAgcmV0dXJuIGtleS5zcGxpdCgnLCcpW2luZGV4XTsKICAgICAgfQogICAgfSwKICAgIC8vIOyKpO2LuOy7tyBpbWcg6rCc7IiYIOyEuOuKlCDtlajsiJguCiAgICBwaG90b0luZGV4KHBob3RvVXJsKSB7CiAgICAgIGlmKHBob3RvVXJsID09PSAnJykgewogICAgICAgIHJldHVybiB0aGlzLmltZ0luZGV4ID0gMDsKICAgICAgfSBlbHNlIGlmKHBob3RvVXJsLmluZGV4T2YoJ3wnKSA9PT0gLTEpIHsgICAgIAogICAgICAgIHJldHVybiB0aGlzLmltZ0luZGV4ID0gMTsKICAgICAgfSBlbHNlIGlmKHBob3RvVXJsLmluZGV4T2YoJ3wnKSkgeyAvLyBodHRw7J2YIOqwnOyImOyXkCDrlLDrnbwgdi1mb3LsnbTsmqntlbQg7J2066+47KeAIO2DnOq3uCDsg53shLEuCiAgICAgICAgcmV0dXJuIHRoaXMuaW1nSW5kZXggPSBwaG90b1VybC5tYXRjaCgvaHR0cC9nKS5sZW5ndGg7CiAgICAgIH0KICAgIH0sCiAgICBzdGxsSW1nVVJMKHVybCwgaW5kZXgpIHsgICAgICAgICAgICAKICAgICAgaWYodXJsID09PSAnJykgeyAgIC8vIHVybOydtCDsl4bsnYQg6rK97JqwCiAgICAgICAgLy8gcG9zdGVyIHVybOyjvOyGjOqwgCDsl4bsnYQg6rK97JqwIOu5iCDsnbTrr7jsp4Ag7LaU7LacLgogICAgICAgIHJldHVybiAnaHR0cDovL3BsYWNlaG9sZC5pdC8xNDR4ODYnOwogICAgICB9IGVsc2UgaWYodXJsLmluZGV4T2YoJ3wnKSA9PT0gLTEpIHsgICAvLyB1cmzsnbQgMeqwnOydvCDqsr3smrAKICAgICAgICByZXR1cm4gdXJsOwogICAgICB9IGVsc2UgaWYodXJsLmluZGV4T2YoJ3wnKSkgeyAgIC8vIHVybOydtCAy6rCcIOydtOyDgeydvCDqsr3smrAgIAogICAgICAgIHJldHVybiB1cmwuc3BsaXQoJ3wnKVtpbmRleF07ICAvLyBzcGxpdOulvCDsnbTsmqntlbQgJ3wn66W8IOq4sOykgOycvOuhnCB1cmzsnYQg64KY64iULiDqt7gg65Kk7JeQIOqwgSBpbmRleOyXkCDrp57ripQg7IKs7KeEdXJs7J2EIHJldHVybi4KICAgICAgfSAKICAgIH0sCiAgICAvLyDrsLDsmrDqsIAgMTDrqoUg7LSI6rO87J28IOqyveyasCAxMOuqheq5jOyngOunjCDstpTstpztlaguCiAgICBhY3Rvck51bShhY3RvcnMsIG51bSkgewogICAgICBjb25zb2xlLmxvZyhhY3RvcnMubGVuZ3RoKTsKICAgICAgcmV0dXJuIGFjdG9ycy5zbGljZSgwLCBudW0pOwogICAgfSwKICAgIC8vICfrjZTrs7TquLAn67KE7Yq8IO2BtOumre2VmOuptCDrqqjrk6Ag67Cw7JqwIOuqqeuhneydtCDrs7TsnbTrj4TroZ0g7ZW07KSMLgogICAgYWN0b3JNb3JlKGFsbCwgbW9yZUNoZWNrKSB7CiAgICAgIGlmKHRoaXMuYWN0b3JzQWxsQ2hlY2sgPT09ICdubycpIHsKICAgICAgICB0aGlzLmFjdG9ycyA9IGFsbDsKICAgICAgICB0aGlzLmFjdG9yc0FsbENoZWNrID0gbW9yZUNoZWNrOwogICAgICAgIHRoaXMuYWN0b3JzQnRuVGV4dCA9ICfsoJHquLAnOwogICAgICB9IGVsc2UgaWYodGhpcy5hY3RvcnNBbGxDaGVjayA9PT0gJ3llcycpIHsKICAgICAgICB0aGlzLmFjdG9ycyA9IDEwOwogICAgICAgIHRoaXMuYWN0b3JzQWxsQ2hlY2sgPSAnbm8nOwogICAgICAgIHRoaXMuYWN0b3JzQnRuVGV4dCA9ICfrjZTrs7TquLAnOwogICAgICB9ICAgICAKICAgIH0sCiAgICAvLyDrsLDsmrAg7J2066aE7JeQICFIRSwgIUhTIOygnOqxsO2VtOykjC4KICAgIGFjdG9yRWRpdChuYW1lKSB7CiAgICAgIGlmKG5hbWUubWF0Y2goLyFIRSB8ICFIUy9naSkpIHJldHVybiBuYW1lLnJlcGxhY2UoLyFIRSB8ICFIUy9nLCAnJyk7CiAgICAgIGVsc2UgcmV0dXJuIG5hbWU7CiAgICB9LAoKICAgIC8vIGtleXdvcmQg7YG066at7ZWY66m0IO2VtOuLuSDtgqTsm4zrk5zrs4Qg7JiB7ZmU66qp66GdIOuztOydtOqyjCDtlaguCiAgICBidG5TZWFyY2goY2hlY2spIHsKICAgICAgLy8g7JiB7ZmU6rKA7IOJ7JyE7ZW0IOyeheugpe2VnCDqsoDsg4nslrQgKyDqsoDsg4ntg4DsnoUgY29va2ll7JeQIOyggOyepe2VtOykjC4KICAgICAgc2F2ZVZhbHVlKGBrZXl3b3JkPSR7dGhpcy5zZWFyY2hUZXh0fWApOwogICAgICBzYXZlVHlwZSh0aGlzLmNoZWNrKTsgCgogICAgICBjb25zdCBzZWFyY2hUeHRCb3ggPSB7CiAgICAgICAgc2VhcmNoVHh0IDogYGtleXdvcmQ9JHt0aGlzLnNlYXJjaFRleHR9YCwgCiAgICAgICAgY2hlY2sgOiBjaGVjaywKICAgICAgfTsKICAgICAgY29uc29sZS5sb2coc2VhcmNoVHh0Qm94KTsKICAgICAgICAgICAgCiAgICAgIC8vIOuwlOuhnCBzdGF0ZeyXkCDqsoHsg4nslrTrnpEg7LK07YGs67CV7Iqk7ZmV7J2444WH642w7J207YSwIOuEo+yWtOykmOu0hC4KICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCdTVEFURV9VVEwnLCBzZWFyY2hUeHRCb3gpOwoKICAgICAgLy8gcm91dGVy7J2064+ZIOyjvOyGjCDrs7TrgrTspIwuCiAgICAgIHRoaXMuJHJvdXRlci5wdXNoKCcvbW92aWUnKTsKCgogICAgICAvLyBpbnB1dOywvSDruYTsm4zspIwuCiAgICAgIHRoaXMuc2VhcmNoVGV4dCA9ICcnOwogICAgfSwKICAgIC8vIGxpa2XrsoTtirwg7YG066atIOyLnCBkYXRh7JeQIGxpa2VDaGVja+uNsOydtO2EsCDsoITri6wuCiAgICBsaWtlTW92aWUodGl0bGUsIGRpcmVjdG9yLCBtb3ZpZVNlcSkgewogICAgICAvLyDsoovslYTsmpQg67KE7Yq8IOqwkuqzvCDtlbTri7kg7JiB7ZmU7J2YIOygleuztOulvCAn7KKL7JWE7JqU7KO866i464uIJ+uwsOyXtCDsho0g7JqU7IaM66GcIOuEo+yWtOyjvOyekC4KCgogICAgICBpZih0aGlzLmxpa2VDaGVjayA9PT0gJ2ZhbHNlJykgewogICAgICAgIHRoaXMubGlrZUNoZWNrID0gJ3RydWUnOwoKICAgICAgICAvLyBsZXQgdGhpc0xpa2VJbmZvcm0gPSAndHJ1ZSc7CiAgICAgICAgLy8gbGV0IHRoaXNMaWtlSW5mb3JtID0gewogICAgICAgIC8vICAgLy8gdGl0bGU6ICd0aXRsZT3sp4Trj4QmZGlyZWN0b3I97Jyg64+Z7KKFJm1vdmllU2VxPTA5ODQ4JywKICAgICAgICAvLyAgIC8vIG1vdmllSUQ6IGB0aXRsZT0ke3RpdGxlfSZkaXJlY3Rvcj0ke2RpcmVjdG9yfSZtb3ZpZVNlcT0ke21vdmllU2VxfWAsCiAgICAgICAgLy8gICBsaWtlQ0s6ICd0cnVlJwogICAgICAgIC8vIH07ICAgCgogICAgICAgIC8vIHNhdmVMaWtlUG9ja2V07JeQIOuEo+yWtOyjvOq4sCDsnITtlbQg67Cw7Je066GcIOunjOuTpOydjC4o7KSR67O165CY64uI6rmMIOuCmOykkeyXkCDsoJXrpqztlaAg67Cp67KVIOyDneqwge2VmOq4sCkKICAgICAgICBsZXQgbGlrZVBvY2tldCA9IFsgCiAgICAgICAgICB7bW92aWVJRDogYHRpdGxlPSR7dGl0bGV9JmRpcmVjdG9yPSR7ZGlyZWN0b3J9Jm1vdmllU2VxPSR7bW92aWVTZXF9YH0sCiAgICAgICAgICB7bGlrZUNLOiAndHJ1ZSd9CiAgICAgICAgXTsKCiAgICAgICAgCiAgICAgICAgLy8gbGV0IGdldExpa2VQSyA9IGdldExpa2VQb2NrZXQoKTsKICAgICAgICAvLyBjb25zb2xlLmxvZyhnZXRMaWtlUEspOwogICAgICAgIC8vIGNvbnNvbGUubG9nKGdldExpa2VQSy5zcGxpdCgnWycpKTsKICAgICAgICAvLyBsZXQgbGlrZVBLZGl2ID0gZ2V0TGlrZVBLLnNwbGl0KCdbJyk7CiAgICAgICAgLy8gY29uc29sZS5sb2cobGlrZVBLZGl2WzFdLnJlcGxhY2UoL1tce1x9XF1dL2csICcnKS5zbGljZShsaWtlUEtkaXZbMV0uaW5kZXhPZignOicpLCBsaWtlUEtkaXZbMV0uaW5kZXhPZignLCcpLTIpLnJlcGxhY2UoL1wiL2csICcnKSk7IC8vIGxpa2VQb2NrZXTsl5Ag65Ok7Ja07J6I64qUIOyYge2ZlCDsoJXrs7Qg7ZWY64KY7JSpIOy2lOy2nCDtm4QgLgogICAgICAgIC8vIGNvbnNvbGUubG9nKGxpa2VQS2Rpdik7CiAgICAgICAgCiAgICAgICAgLy8gY29uc29sZS5sb2codGhpc0xpa2VJbmZvcm0ubW92aWVJRCk7CgogICAgICAgIC8vIGZvcihsZXQgaSA9IDA7IGkgPCBsaWtlUEtkaXYubGVuZ3RoOyBpKyspIHsKICAgICAgICAvLyAgIGxldCBtb3ZpZUluZm9ybSA9IGxpa2VQS2RpdltpXS5yZXBsYWNlKC9bXHtcfVxdXS9nLCAnJykuc2xpY2UobGlrZVBLZGl2WzFdLmluZGV4T2YoJzonKSwgbGlrZVBLZGl2WzFdLmluZGV4T2YoJywnKS0yKS5yZXBsYWNlKC9cIi9nLCAnJyk7CiAgICAgICAgLy8gICBpZihtb3ZpZUluZm9ybSAhPT0gdGhpc0xpa2VJbmZvcm0ubW92aWVJRCkgewogICAgICAgIC8vICAgICBjb25zb2xlLmxvZygn7JiB7ZmU6rCAIHBvY2tldOyXkCDsl4bri6QhISEnKTsKICAgICAgICAgICAgCiAgICAgICAgLy8gICB9CiAgICAgICAgLy8gfQoKICAgICAgICAvLyBjb29raWXsl5AgbGlrZeqwkiDrhKPslrTspIwuCiAgICAgICAgLy8gc2F2ZUxpa2UodGhpc0xpa2VJbmZvcm0pOyAKICAgICAgICAvLyBjb29raWXsnZggbGlrZVBvY2tldOyXkCBsaWtl67KE7Yq8IOuIhOuluCDsmIHtmZTsoJXrs7Qg64Sj7Ja07KSMLgogICAgICAgIHNhdmVMaWtlUG9ja2V0KGxpa2VQb2NrZXQpOwogICAgICB9IGVsc2UgewogICAgICAgIGNvbnNvbGUubG9nKCfsoovslYTsmpQg7Leo7IaM7ZWp64uI64ukISEhIScpOwogICAgICAgIAogICAgICAgIHRoaXMubGlrZUNoZWNrID0gJ2ZhbHNlJzsKCiAgICAgICAgbGV0IGxpa2VQb2NrZXQgPSAnZmFsc2UnOwogICAgICAgIHNhdmVMaWtlUG9ja2V0KGxpa2VQb2NrZXQpOwoKCiAgICAgICAgLy8gbGV0IHRoaXNMaWtlSW5mb3JtID0gJ2ZhbHNlJzsKICAgICAgICAvLyBsZXQgdGhpc0xpa2VJbmZvcm0gPSB7CiAgICAgICAgLy8gICAvLyB0aXRsZTogJ3RpdGxlPeynhOuPhCZkaXJlY3Rvcj3snKDrj5nsooUmbW92aWVTZXE9MDk4NDgnLAogICAgICAgIC8vICAgLy8gbW92aWVJRDogYHRpdGxlPSR7dGl0bGV9JmRpcmVjdG9yPSR7ZGlyZWN0b3J9Jm1vdmllU2VxPSR7bW92aWVTZXF9YCwKICAgICAgICAvLyAgIGxpa2VDSzogJ2ZhbHNlJwogICAgICAgIC8vIH07CgogICAgICAgIC8vIHNhdmVMaWtlKHRoaXNMaWtlSW5mb3JtKTsKCiAgICAgICAgLy8g7L+g7YKk7J2YIGxpa2VQb2NrZXTsl5Ag7KCA7J6l65CcIOygleuztCDqsIDsoLjsmYDshJwg7KKL7JWE7JqUIOy3qOyGjO2VnCDsmIHtmZQg642w7J207YSwIOyCreygnOyLnOy8nCDspJjslbztlaguCgoKCgoKICAgICAgICAvLyBsZXQgbGlrZVBvY2tldCA9IFsgLy8gc2F2ZUxpa2VQb2NrZXTsl5Ag64Sj7Ja07KO86riwIOychO2VtCDrsLDsl7TroZwg66eM65Ok7J2MLijspJHrs7XrkJjri4jquYwg64KY7KSR7JeQIOygleumrO2VoCDrsKnrspUg7IOd6rCB7ZWY6riwKQogICAgICAgIC8vICAge21vdmllSUQ6IGB0aXRsZT0ke3RpdGxlfSZkaXJlY3Rvcj0ke2RpcmVjdG9yfSZtb3ZpZVNlcT0ke21vdmllU2VxfWB9LAogICAgICAgIC8vICAge2xpa2VDSzogJ2ZhbHNlJ30KICAgICAgICAvLyBdOwoKICAgICAgICAvLyAvLyDsv6DtgqTsnZggbGlrZVBvY2tldOyXkCDsoIDsnqXrkJwg7KCV67O0IOqwgOyguOyZgOyEnCDsoovslYTsmpQg7Leo7IaM7ZWcIOyYge2ZlCDrjbDsnbTthLAg7IKt7KCc7Iuc7LycIOykmOyVvO2VqC4KICAgICAgICAvLyBsZXQgZ2V0TGlrZVBLID0gZ2V0TGlrZVBvY2tldCgpOwogICAgICAgIC8vIGxldCBsaWtlUEtkaXYgPSBnZXRMaWtlUEsuc3BsaXQoJ1snKTsKICAgICAgICAvLyBjb25zb2xlLmxvZygnbGlrZVBvY2tldOyXkCDsoIDsnqXrkJwg7JiB7ZmUIOuNsOydtO2EsCDrtojrn6zsmKjri6QhISEhJyk7ICAgICAgICAKICAgICAgICAvLyBjb25zb2xlLmxvZyhnZXRMaWtlUEspOwogICAgICAgIC8vIGNvbnNvbGUubG9nKGxpa2VQS2Rpdik7CiAgICAgICAgCiAgICAgICAgLy8gZm9yKGxldCBpID0gMDsgaSA8IGxpa2VQS2Rpdi5sZW5ndGg7IGkrKykgewogICAgICAgIC8vICAgLy8gbGV0IGdldExpa2VEaXYgPSBsaWtlUEtkaXZbaV0ucmVwbGFjZSgvW1x7XH1cXV0vZywgJycpLnNwbGl0KCciJyk7CiAgICAgICAgLy8gICBsZXQgbmV3TGlrZU1vdmllID0gbGlrZVBvY2tldFswXVtPYmplY3Qua2V5cyhsaWtlUG9ja2V0WzBdKVswXV07CgogICAgICAgIC8vICAgY29uc29sZS5sb2cobGlrZVBLZGl2W2ldLnJlcGxhY2UoL1tce1x9XF1dL2csICcnKS5zcGxpdCgnIicpWzNdKTsKICAgICAgICAvLyAgIGlmKGxpa2VQS2RpdltpXS5yZXBsYWNlKC9bXHtcfVxdXS9nLCAnJykuc3BsaXQoJyInKVszXSA9PT0gbmV3TGlrZU1vdmllKSB7CiAgICAgICAgLy8gICAgIHNhdmVMaWtlUG9ja2V0KGxpa2VQS2RpdltpXS5yZXBsYWNlKCcidHJ1ZSInLCAnImZhbHNlIicpKTsKICAgICAgICAvLyAgIH0KICAgICAgICAvLyB9CiAgICAgICAgLy8gY29uc29sZS5sb2cobGlrZVBvY2tldFswXVtPYmplY3Qua2V5cyhsaWtlUG9ja2V0WzBdKVswXV0pOwogICAgICAgIAogICAgICAgIC8vIHNhdmVMaWtlUG9ja2V0KGxpa2VQb2NrZXQpOwogICAgICB9CiAgICAgIGNvbnNvbGUubG9nKHRoaXMubGlrZUNoZWNrKTsKICAgIH0sCiAgfQp9Cgo="},{"version":3,"sources":["InformConts.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;AAMA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"InformConts.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"infromConts\" v-if=\"clickMovieData.Data\">\n    <!-- {{ clickMovieData.Data[0].Result[0] }} -->\n      <div class=\"topData clear\">\n        <img \n          class=\"poster\"                    \n          v-bind:src=\"posterURL(clickMovieData.Data[0].Result[0].posters)\" \n          v-bind:alt=\"textEdit(clickMovieData.Data[0].Result[0].title)\"\n        />\n        <div class=\"summaryBox\">\n          <div class=\"title\">\n            <h2>{{ textEdit(clickMovieData.Data[0].Result[0].title) }} ( {{ clickMovieData.Data[0].Result[0].prodYear }} )</h2>\n            <p class=\"engTitle\">{{ clickMovieData.Data[0].Result[0].titleEng }}</p>\n          </div><!--.title-->\n          <div class=\"textBox\">\n            <div class=\"textList\">\n              <span>{{ clickMovieData.Data[0].Result[0].genre }}</span>\n              <span>{{ clickMovieData.Data[0].Result[0].nation }}</span>\n            </div><!--.textInform-->\n            <div class=\"textList\">\n              <span>{{ `${dateEdit(clickMovieData.Data[0].Result[0].repRlsDate)} 개봉` }}</span>\n              <span>{{ clickMovieData.Data[0].Result[0].runtime }}분</span>\n              <span>{{ clickMovieData.Data[0].Result[0].rating }}</span>\n            </div><!--.textInform-->\n            <p v-if=\"clickMovieData.Data[0].Result[0].directors.director[0].directorNm !== ''\">(감독) {{ textEdit(clickMovieData.Data[0].Result[0].directors.director[0].directorNm) }}</p>\n\n            <a v-bind:href=\"clickMovieData.Data[0].Result[0].kmdbUrl\" target=\"blanket\">영화 상세정보</a>\n          </div><!--.textBox-->\n\n          <div class=\"likeScoreBox\">\n            <div class=\"likeBtn\" >\n              <button \n                @click=\"likeMovie(textEdit(clickMovieData.Data[0].Result[0].title), textEdit(clickMovieData.Data[0].Result[0].directors.director[0].directorNm), clickMovieData.Data[0].Result[0].movieSeq)\"\n                :class=\"{'fillHeart':likeCheck === 'true'}\">❤</button>\n            </div>\n          </div><!--.likeScoreBox-->\n          <br/>\n          <!-- <p>영상url: {{ clickMovieData.vods.vod[0].vodUrl }}</p>\n          <video :src=\"clickMovieData.vods.vod[0].vodUrl\"></video> -->\n          <br/>\n        </div><!--.summaryBox-->\n      </div><!--.topData-->\n\n      <div class=\"detailBox\">\n        <!-- 한문장의 슬로건(줄거리 중 첫 문장!)-->\n        <p \n          class=\"movieSlogan\"\n          v-if=\"clickMovieData.Data[0].Result[0].plots.plot[0].plotText !== ''\">\n          {{ sloganEdit(clickMovieData.Data[0].Result[0].plots.plot[0].plotText) }}\n        </p>\n        <!-- 줄거리 -->\n          <p\n            class=\"movieStory\" \n            v-if=\"clickMovieData.Data[0].Result[0].plots.plot[0].plotText !== ''\">\n            {{ storyEdit(clickMovieData.Data[0].Result[0].plots.plot[0].plotText) }}\n          </p>\n\n          <div class=\"movieKeyword\" v-if=\"clickMovieData.Data[0].Result[0].keywords\">\n            <form @click=\"btnSearch('keywordCK')\">\n              <button \n                v-for=\"(keyword, keywordIndex) in keywordNum(clickMovieData.Data[0].Result[0].keywords)\" :key=\"keywordIndex\"\n                @click=\"searchText = keyWord(clickMovieData.Data[0].Result[0].keywords, keywordIndex)\">\n                {{ `# ${keyWord(clickMovieData.Data[0].Result[0].keywords, keywordIndex)}` }}\n              </button>\n            </form>\n          </div>\n          \n          <div class=\"movieStlls\" v-if=\"clickMovieData.Data[0].Result[0].stlls\">\n            <p>{{ `${photoIndex(clickMovieData.Data[0].Result[0].stlls)}장의 스틸컷` }}</p>\n            <div  v-for=\"(photo, imgIndex) in photoIndex(clickMovieData.Data[0].Result[0].stlls)\" :key=\"imgIndex\" >\n              <img :src=\"stllImgURL(clickMovieData.Data[0].Result[0].stlls, imgIndex)\" alt=\"\" />\n              <!-- {{ imgIndex }} -->\n            </div>\n          </div>\n\n          <div class=\"movieActor clear\" v-if=\" clickMovieData.Data[0].Result[0].actors.actor[0].actorNm\">\n            <p>출연 / 스탭</p>\n            <div\n              class=\"actorsBox\"\n              v-for=\"(actorName, index) in actorNum((clickMovieData.Data[0].Result[0].actors.actor), actors)\" \n              v-bind:key=\"index\"><!--key를 actorName.actorId로 주니까 데이터 자체에 같은 배우명단이 2개인 경우가 있어서 actorId가 중복된다는 error가 발생. 일단 에러 없애기 위해서 key를 임의의 index로 주었다.-->\n                  <span class=\"krNm\">{{ actorEdit(actorName.actorNm) }} </span>\n                  <br/>\n                  <span class=\"enNm\">{{ actorEdit(actorName.actorEnNm) }}</span> \n            </div><!--.actorsBox-->\n\n            <button \n              v-if=\"clickMovieData.Data[0].Result[0].actors.actor.length > 10\"\n              @click=\"actorMore(clickMovieData.Data[0].Result[0].actors.actor.length, 'yes')\">{{ actorsBtnText }}</button>\n          </div><!--.movieActor-->\n      </div><!--.detailBox-->\n      \n      <br/>\n      <!-- <div style=\"border:2px solid red;\">클릭한 id 영화 데이터: {{ clickMovieData }}</div> -->\n      \n  </div>\n</template>\n\n<script>\nimport { saveValue, saveType, deleteCookie, saveFirstKey, saveLike, getLike, saveLikePocket, getLikePocket, getIDFromCookie } from '../utils/cookies';\n\nexport default {\n  data() {\n    return {\n      imgIndex: 0,\n      keywordIndex: 0,\n      searchText: '',\n      key: '', // 키워드 중 첫 번째만 추출.(SimilarMovie.vue로 전달할 것)\n      actors: 10, // 배우 불러오는 수.(더보기 버튼 클릭시 전체 배우 수만큼 숫자 늘어남)\n      actorsAllCheck: 'no',\n      actorsBtnText: '더보기',\n      likeCheck: '',\n    }\n  },\n  computed: {\n    clickMovieData() {\n      // return this.$store.state.clickMovie;\n      return this.$store.state.moviedata;\n    },\n    getCookieLike() {\n      return getLike();\n    },\n  },\n  created() {   \n    console.log(this.$store.state.movieID);\n    \n    // 영화 상세정보 불러옴.(cookie이용해서 api만들어서 가져올 것임.)\n    const idAPI = this.$store.state.movieID;\n    console.log(idAPI);\n    \n    this.$store.dispatch('FETCH_TITLE', idAPI);\n\n\n    // // cookie의 like와 movie_ID 내용을 확인해서 좋아요 버튼 활셩화 유무 판단.\n    // console.log('like확인!!!');\n    // console.log(this.getCookieLike);\n    \n    // this.likeCheck = this.getCookieLike;\n    // console.log(this.likeCheck);\n\n\n    // cookie의 likePocket에 영화정보가 있으면 data의 likeCheck를 true로 해줌.(페이지 로딩시 - 즉, 다른 페이지 갔다가 다시 들어와도 그대로 기록이 남아있도록 해주는 것.)\n    let getMovieID = getIDFromCookie();   // MovieConts에서 포스터 클릭 시 cookie로 넘겨준 이 영화 정보 가져옴.\n    let getLike = getLikePocket(); // cookie에 있는 likePocket 내용 가져옴.\n    let likePKdiv = getLike.split('['); // likePocket의 내용들(객체화시킴)을 배열로 바꿔줌.\n\n    console.log(getMovieID.replace(/(\\s*)/g, ''));    \n\n    for(let i = 1; i < likePKdiv.length; i++) {\n      let getLikeDiv = likePKdiv[i].replace(/[\\{\\}\\]]/g, '').split('\"')[3]; // ㅣlikePocket에 들어있는 영화정보들 일일히 비교하기위해 영화정보만 분리시킴.(like정보도 함께 있었기 때문.)\n      console.log(getLikeDiv.replace(/(\\s*)/g, ''));\n      let like = likePKdiv[i].replace(/[\\{\\}\\]]/g, '').split('\"')[7];\n      console.log(like);\n      \n      \n      // getMovieID와 getLikeDiv의 공백 수가 달라서 아예 공백을 없애서 비교해줌.\n      if(getLikeDiv.replace(/(\\s*)/g, '') === getMovieID.replace(/(\\s*)/g, '')) { // 현재 상세페이지의 영화가 likePocket에 있으면 좋아요 버튼 true로 줌.\n        console.log('좋아요 포켓에 이 영화 있다.');\n        this.likeCheck = like;\n        break;\n      } else {\n        console.log('좋아요 포켓에 이 영화 없습니다..');\n        \n        this.likeCheck = 'false';\n      }\n    }\n    \n    \n\n    \n  },\n  // 메서드의 actorNum을 실행시키기 위해서 beforeUpdated를 작성해준 것이었는데, 없어도 알아서 작동된다. 태그에 v-for로 넣어줬더니.\n  // beforeUpdated(){\n  //   console.log('actornum실행해라~~');\n    \n  //   this.actorNum();\n  // },\n  methods: {\n    textEdit(text) {\n      // 검색어를 나타내는 !HE, !HS글자 삭제.\n      return text.replace(/!HE|!HS/g, '');\n    },\n    posterURL(url) {            \n      if(url === '') {   // url이 없을 경우\n        // poster url주소가 없을 경우 빈 이미지 추출.\n        return 'http://placehold.it/213x303';\n      }else if(url.indexOf('|') === -1) {   // url이 1개일 경우\n        return url;\n      }else if(url.indexOf('|')) {   // url이 2개 이상일 경우  \n        return url.substring(0, url.indexOf('|')); \n      } \n    },\n    // 영화 개봉일자 편집.\n    dateEdit(date) {\n      return date.replace(/(\\d{4})(\\d{2})(\\d{2})/, '$1.$2.$3');\n      // \\d : 숫자 문자가 아닌 문자에 대응된다. [^0-9]와 동일하다.\n      // {n} : 앞 표현식이 n번 나타나는 부분에 대응된다. n은 반드시 양의 정수여야 한다.\n      // 즉, \\d{4}는 앞에서 4번째까지의 [0-9]까지 해당하는 숫자를 지칭하게 되는 것이다.\n    },\n    // 줄거리 중 제일 앞 문장만 추출.\n    sloganEdit(story) {\n      return story.substring(0, story.indexOf('!')+1);\n    },\n    // 줄거리 중 제일 앞 문장 제외한 나머지 모든 줄거리 추출.\n    storyEdit(story) {\n      return story.substring(story.indexOf('!')+1, story.length)\n    },\n    // keyword 개수 구함.\n    keywordNum(key) {\n      if(key === '') {\n        return this.keywordIndex = 0;\n      } else if(key.indexOf(',') === -1) {\n        return this.keywordIndex = 1;\n      } else if(key.indexOf(',')) {\n        return this.keywordIndex = key.match(/,/g).length + 1;\n      } \n    },\n    // keyword하나씩 넣어줌. + data의 keywordFirst에 첫 번째 키워드 넣어줌.\n    keyWord(key, index) {\n      if(key === '') return;\n      else if(key.indexOf(',') === -1) {\n        // this.keywordFirst = key;\n        return key;\n      }\n      else if(key.indexOf(',')) {\n        // this.keywordFirst = key.split(',')[0];\n        return key.split(',')[index];\n      }\n    },\n    // 스틸컷 img 개수 세는 함수.\n    photoIndex(photoUrl) {\n      if(photoUrl === '') {\n        return this.imgIndex = 0;\n      } else if(photoUrl.indexOf('|') === -1) {     \n        return this.imgIndex = 1;\n      } else if(photoUrl.indexOf('|')) { // http의 개수에 따라 v-for이용해 이미지 태그 생성.\n        return this.imgIndex = photoUrl.match(/http/g).length;\n      }\n    },\n    stllImgURL(url, index) {            \n      if(url === '') {   // url이 없을 경우\n        // poster url주소가 없을 경우 빈 이미지 추출.\n        return 'http://placehold.it/144x86';\n      } else if(url.indexOf('|') === -1) {   // url이 1개일 경우\n        return url;\n      } else if(url.indexOf('|')) {   // url이 2개 이상일 경우  \n        return url.split('|')[index];  // split를 이용해 '|'를 기준으로 url을 나눔. 그 뒤에 각 index에 맞는 사진url을 return.\n      } \n    },\n    // 배우가 10명 초과일 경우 10명까지만 추출함.\n    actorNum(actors, num) {\n      console.log(actors.length);\n      return actors.slice(0, num);\n    },\n    // '더보기'버튼 클릭하면 모든 배우 목록이 보이도록 해줌.\n    actorMore(all, moreCheck) {\n      if(this.actorsAllCheck === 'no') {\n        this.actors = all;\n        this.actorsAllCheck = moreCheck;\n        this.actorsBtnText = '접기';\n      } else if(this.actorsAllCheck === 'yes') {\n        this.actors = 10;\n        this.actorsAllCheck = 'no';\n        this.actorsBtnText = '더보기';\n      }     \n    },\n    // 배우 이름에 !HE, !HS 제거해줌.\n    actorEdit(name) {\n      if(name.match(/!HE | !HS/gi)) return name.replace(/!HE | !HS/g, '');\n      else return name;\n    },\n\n    // keyword 클릭하면 해당 키워드별 영화목록 보이게 함.\n    btnSearch(check) {\n      // 영화검색위해 입력한 검색어 + 검색타입 cookie에 저장해줌.\n      saveValue(`keyword=${this.searchText}`);\n      saveType(this.check); \n\n      const searchTxtBox = {\n        searchTxt : `keyword=${this.searchText}`, \n        check : check,\n      };\n      console.log(searchTxtBox);\n            \n      // 바로 state에 겁색어랑 체크박스확인ㅇ데이터 넣어줘봄.\n      this.$store.commit('STATE_UTL', searchTxtBox);\n\n      // router이동 주소 보내줌.\n      this.$router.push('/movie');\n\n\n      // input창 비워줌.\n      this.searchText = '';\n    },\n    // like버튼 클릭 시 data에 likeCheck데이터 전달.\n    likeMovie(title, director, movieSeq) {\n      // 좋아요 버튼 값과 해당 영화의 정보를 '좋아요주머니'배열 속 요소로 넣어주자.\n\n\n      if(this.likeCheck === 'false') {\n        this.likeCheck = 'true';\n\n        // let thisLikeInform = 'true';\n        // let thisLikeInform = {\n        //   // title: 'title=진도&director=유동종&movieSeq=09848',\n        //   // movieID: `title=${title}&director=${director}&movieSeq=${movieSeq}`,\n        //   likeCK: 'true'\n        // };   \n\n        // saveLikePocket에 넣어주기 위해 배열로 만들음.(중복되니까 나중에 정리할 방법 생각하기)\n        let likePocket = [ \n          {movieID: `title=${title}&director=${director}&movieSeq=${movieSeq}`},\n          {likeCK: 'true'}\n        ];\n\n        \n        // let getLikePK = getLikePocket();\n        // console.log(getLikePK);\n        // console.log(getLikePK.split('['));\n        // let likePKdiv = getLikePK.split('[');\n        // console.log(likePKdiv[1].replace(/[\\{\\}\\]]/g, '').slice(likePKdiv[1].indexOf(':'), likePKdiv[1].indexOf(',')-2).replace(/\\\"/g, '')); // likePocket에 들어있는 영화 정보 하나씩 추출 후 .\n        // console.log(likePKdiv);\n        \n        // console.log(thisLikeInform.movieID);\n\n        // for(let i = 0; i < likePKdiv.length; i++) {\n        //   let movieInform = likePKdiv[i].replace(/[\\{\\}\\]]/g, '').slice(likePKdiv[1].indexOf(':'), likePKdiv[1].indexOf(',')-2).replace(/\\\"/g, '');\n        //   if(movieInform !== thisLikeInform.movieID) {\n        //     console.log('영화가 pocket에 없다!!!');\n            \n        //   }\n        // }\n\n        // cookie에 like값 넣어줌.\n        // saveLike(thisLikeInform); \n        // cookie의 likePocket에 like버튼 누른 영화정보 넣어줌.\n        saveLikePocket(likePocket);\n      } else {\n        console.log('좋아요 취소합니다!!!!');\n        \n        this.likeCheck = 'false';\n\n        let likePocket = 'false';\n        saveLikePocket(likePocket);\n\n\n        // let thisLikeInform = 'false';\n        // let thisLikeInform = {\n        //   // title: 'title=진도&director=유동종&movieSeq=09848',\n        //   // movieID: `title=${title}&director=${director}&movieSeq=${movieSeq}`,\n        //   likeCK: 'false'\n        // };\n\n        // saveLike(thisLikeInform);\n\n        // 쿠키의 likePocket에 저장된 정보 가져와서 좋아요 취소한 영화 데이터 삭제시켜 줘야함.\n\n\n\n\n\n        // let likePocket = [ // saveLikePocket에 넣어주기 위해 배열로 만들음.(중복되니까 나중에 정리할 방법 생각하기)\n        //   {movieID: `title=${title}&director=${director}&movieSeq=${movieSeq}`},\n        //   {likeCK: 'false'}\n        // ];\n\n        // // 쿠키의 likePocket에 저장된 정보 가져와서 좋아요 취소한 영화 데이터 삭제시켜 줘야함.\n        // let getLikePK = getLikePocket();\n        // let likePKdiv = getLikePK.split('[');\n        // console.log('likePocket에 저장된 영화 데이터 불러온다!!!!');        \n        // console.log(getLikePK);\n        // console.log(likePKdiv);\n        \n        // for(let i = 0; i < likePKdiv.length; i++) {\n        //   // let getLikeDiv = likePKdiv[i].replace(/[\\{\\}\\]]/g, '').split('\"');\n        //   let newLikeMovie = likePocket[0][Object.keys(likePocket[0])[0]];\n\n        //   console.log(likePKdiv[i].replace(/[\\{\\}\\]]/g, '').split('\"')[3]);\n        //   if(likePKdiv[i].replace(/[\\{\\}\\]]/g, '').split('\"')[3] === newLikeMovie) {\n        //     saveLikePocket(likePKdiv[i].replace('\"true\"', '\"false\"'));\n        //   }\n        // }\n        // console.log(likePocket[0][Object.keys(likePocket[0])[0]]);\n        \n        // saveLikePocket(likePocket);\n      }\n      console.log(this.likeCheck);\n    },\n  }\n}\n\n</script>\n\n<style>\n\n</style>"]}]}