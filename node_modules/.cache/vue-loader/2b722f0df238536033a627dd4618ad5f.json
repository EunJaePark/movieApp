{"remainingRequest":"/Users/eunjae/Desktop/github/movieApp 복사본/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/eunjae/Desktop/github/movieApp 복사본/src/components/MovieConts.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/eunjae/Desktop/github/movieApp 복사본/src/components/MovieConts.vue","mtime":1590631650618},{"path":"/Users/eunjae/Desktop/github/movieApp 복사본/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eunjae/Desktop/github/movieApp 복사본/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/eunjae/Desktop/github/movieApp 복사본/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eunjae/Desktop/github/movieApp 복사본/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IGV2ZW50YnVzIH0gZnJvbSAnLi4vbWFpbic7CgpleHBvcnQgZGVmYXVsdCB7CiAgICBjb21wdXRlZDogewogICAgICAgIG1vdmllZGF0YSgpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLm1vdmllZGF0YTsKICAgICAgICB9LAogICAgICAgIGRhdGFJbk1vdmllZGF0YSgpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMubW92aWVkYXRhLkRhdGE7CiAgICAgICAgfSwKICAgICAgICBtb3ZpZVJlc3VsdCgpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLnJlc3VsdDsKICAgICAgICB9LAogICAgfSwKICAgIGNyZWF0ZWQoKSB7CiAgICAgICAgLy8g7J2067Kk7Yq467KE7Iqk66GcIG1haW5Db250c+yXkOyEnCDsnoXroKXtlZwg6rKA7IOJ7Ja0IOu2iOufrOyYtC4KICAgICAgICBjb25zb2xlLmxvZygn7J2067Kk7Yq467KE7IqkIOydtOyaqe2VtOyEnCBtb3ZpZe2OmOydtOyngOyXkOyEnCAkb27snpHrj5ntlbTslbzrkJzri6QuJyk7CiAgICAgICAgCiAgICAgICAgLy8gZXZlbnRidXMuJG9uKCdzZW5kU2VhcmNoJywgKHNlYXJjaFR4dCwgY2hlY2spID0+IHsKICAgICAgICAvLyAgICAgY29uc29sZS5sb2coc2VhcmNoVHh0LCBjaGVjayk7CiAgICAgICAgLy8gICAgIHRoaXMubmV3TW92aWUoc2VhcmNoVHh0LCBjaGVjayk7CiAgICAgICAgLy8gfSkKCiAgICAgICAgLy8g7J2067Kk7Yq467KE7IqkIOyViOuQmOyEnCBpbnB1dO2OmOydtOyngOyXkOyEnCDrsJTroZwgc3RhdGXsl5Ag64Sj7Ja07KSAIOqwkiDqsIDsoLjsmLQuCiAgICAgICAgY29uc29sZS5sb2codGhpcy4kc3RvcmUuc3RhdGUuc2VhcmNoVHh0KTsKICAgICAgICBjb25zb2xlLmxvZyh0aGlzLiRzdG9yZS5zdGF0ZS5zZWFyY2hUeHQuY2hlY2spOwogICAgICAgIGNvbnNvbGUubG9nKHRoaXMuJHN0b3JlLnN0YXRlLnNlYXJjaFR4dC5zZWFyY2hUeHQpOwogICAgICAgIC8vIGNvbnN0IGNoZWNrVHh0ID0gdGhpcy4kc3RvcmUuc3RhdGUuc2VhcmNoVHh0LmNoZWNrOwogICAgICAgIC8vIGNvbnN0IGlucHV0VHh0ID0gdGhpcy4kc3RvcmUuc3RhdGUuc2VhcmNoVHh0LnNlYXJjaFR4dDsKCiAgICAgICAgY29uc3Qgc2VhcmNoVHh0ID0gdGhpcy4kc3RvcmUuc3RhdGUuc2VhcmNoVHh0OwogICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdGRVRDSF9USVRMRScsIHNlYXJjaFR4dCk7CgogICAgICAgIC8vIG1vdmllRGF0YSgpOwoKICAgIH0sCiAgICBtZXRob2RzOiB7CiAgICAgICAgLy8gbW92aWVkYXRhKCkgewogICAgICAgIC8vICAgICB0aGlzLiRzdG9yZS5zdGF0ZS5yZXN1bHQ7CiAgICAgICAgICAgIAogICAgICAgIC8vICAgICAvLyDrjbDsnbTthLDrp4zrk6TslrTshJwg6re4IOydtOumhCDslYjsl5Ag7J20IOqwkuydhCDspJjrs7TsnpAuCiAgICAgICAgLy8gfSwKICAgICAgICAvLyBzcGHroZwg7KCc7J6R7ZWY66Ck64uIIOychOydmCBjcmVhdGVk7JeQ7IScIOydtOuypO2KuOuyhOyKpOuhnCDrsJvslYTsmKTripTqsowg7J6R64+Z7J20IOyViOuQmOyWtOyEnCwg7JWE7JiIIOydtOuypO2KuOuyhOyKpOulvCDsgqzsmqntlZjsp4Ag7JWK7J2MLgogICAgICAgIC8vIOuUsOudvOyEnCwg7JWE656Y7J2YIG5ld01vdmllKCntlajsiJgg7KO87ISd7LKY66asIO2VnCDqsoMuCgogICAgICAgIC8vIG5ld01vdmllKHNlYXJjaFR4dCwgY2hlY2spIHsKICAgICAgICAvLyAgICAgY29uc29sZS5sb2coc2VhcmNoVHh0LCBjaGVjayk7CiAgICAgICAgICAgIAogICAgICAgIC8vICAgICBjb25zb2xlLmxvZygn7JiB7ZmUIOqygOyDieyWtCDrsJvslZjri6QhISEhJyk7CiAgICAgICAgLy8gICAgIGNvbnN0IHR4dENoZWNrID0ge3NlYXJjaFR4dCwgY2hlY2t9OwogICAgICAgIC8vICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnRkVUQ0hfVElUTEUnLCB0eHRDaGVjaykKICAgICAgICAvLyB9CiAgICB9CgogICAgLy8gY3JlYXRlZCgpIHsKICAgIC8vICAgICBheGlvcwogICAgLy8gICAgIC5nZXQoJyBodHRwOi8vYXBpLmtvcmVhZmlsbS5vci5rci9vcGVuYXBpLWRhdGEyL3dpc2VudXQvc2VhcmNoX2FwaS9zZWFyY2hfeG1sMi5qc3A/Y29sbGVjdGlvbj1rbWRiX25ldzImZGV0YWlsPU4mZGlyZWN0PSVFQiVCMCU5NSVFQyVCMCVBQyVFQyU5QSVCMSZTZXJ2aWNlS2V5PU0xTlYxQjExMDFIWjMyODJUUlBXJykKICAgIC8vICAgICAudGhlbihyZXMgPT4gewogICAgLy8gICAgICAgICB0aGlzLm1vdmllRGF0YSA9IHJlcy5kYXRhOwogICAgLy8gICAgIH0pOwogICAgLy8gfQp9Cg=="},{"version":3,"sources":["MovieConts.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"MovieConts.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"movieConts\">\n      <!-- 검색한 단어 출력 -->\n    <h2>\" {{ moviedata.KMAQuery }} \"</h2>\n\n    <div class=\"dataBox clear\">\n        <div class=\"movies\" v-if=\"dataInMoviedata\">  <!--  v-if는 없어도 될듯. -->\n            <div \n                class=\"movie\"\n                v-for=\"(movie, index) in movieResult \" v-bind:key=\"index\">\n                <div class=\"imgTitle\">\n                    <img \n                        v-if=\"movieResult[index].posters !== ''\"\n                        v-bind:src=\"movieResult[index].posters.substring(0, movieResult[index].posters.indexOf(movieResult[index].posters.match(/g/i)) + 1)\" \n                        :alt=\"movieResult[index].title.replace(/!HS|!HE/g, '')\"/>\n                    <img \n                        v-else\n                        src=\"http://placehold.it/213x303\" \n                        alt=\"영화 포스터(url데이터없음)\"/>\n\n                    <!-- title의 불필요한 글자 삭제해줌. -->\n                    <p>제목: {{ movieResult[index].title.replace(/!HS|!HE/g, '') }}</p>\n                </div>\n                \n                <ul class=\"textData\">\n                    <li>장르: {{ movieResult[index].genre }}</li>\n                    <li>포스터url: {{ movieResult[index].posterUrl }}</li>\n                    <li><a v-bind:href=\"movieResult[index].kmdbUrl\" target=\"blanket\">상세정보</a></li>\n                </ul>\n\n\n                    <br/><br/>\n                    - 영화 포스터 주소 전체\n                    {{ movieResult[index].posters }} \n                    <br/><br/>\n                    - 영화 포스터 여러개의 주소가 있을 경우 처음 주소만 추출.\n                    {{ movieResult[index].posters.substring(0, movieResult[index].posters.indexOf(movieResult[index].posters.match(/g/i)) + 1) }}\n                    <br/><br/>\n            </div>\n        </div>\n    </div>\n    \n    <br/><br/>\n\n    {{ moviedata }}\n  </div>\n</template>\n\n<script>\nimport { eventbus } from '../main';\n\nexport default {\n    computed: {\n        moviedata() {\n            return this.$store.state.moviedata;\n        },\n        dataInMoviedata() {\n            return this.moviedata.Data;\n        },\n        movieResult() {\n            return this.$store.state.result;\n        },\n    },\n    created() {\n        // 이벤트버스로 mainConts에서 입력한 검색어 불러옴.\n        console.log('이벤트버스 이용해서 movie페이지에서 $on작동해야된다.');\n        \n        // eventbus.$on('sendSearch', (searchTxt, check) => {\n        //     console.log(searchTxt, check);\n        //     this.newMovie(searchTxt, check);\n        // })\n\n        // 이벤트버스 안되서 input페이지에서 바로 state에 넣어준 값 가져옴.\n        console.log(this.$store.state.searchTxt);\n        console.log(this.$store.state.searchTxt.check);\n        console.log(this.$store.state.searchTxt.searchTxt);\n        // const checkTxt = this.$store.state.searchTxt.check;\n        // const inputTxt = this.$store.state.searchTxt.searchTxt;\n\n        const searchTxt = this.$store.state.searchTxt;\n        this.$store.dispatch('FETCH_TITLE', searchTxt);\n\n        // movieData();\n\n    },\n    methods: {\n        // moviedata() {\n        //     this.$store.state.result;\n            \n        //     // 데이터만들어서 그 이름 안에 이 값을 줘보자.\n        // },\n        // spa로 제작하려니 위의 created에서 이벤트버스로 받아오는게 작동이 안되어서, 아예 이벤트버스를 사용하지 않음.\n        // 따라서, 아래의 newMovie()함수 주석처리 한 것.\n\n        // newMovie(searchTxt, check) {\n        //     console.log(searchTxt, check);\n            \n        //     console.log('영화 검색어 받았다!!!!');\n        //     const txtCheck = {searchTxt, check};\n        //     this.$store.dispatch('FETCH_TITLE', txtCheck)\n        // }\n    }\n\n    // created() {\n    //     axios\n    //     .get(' http://api.koreafilm.or.kr/openapi-data2/wisenut/search_api/search_xml2.jsp?collection=kmdb_new2&detail=N&direct=%EB%B0%95%EC%B0%AC%EC%9A%B1&ServiceKey=M1NV1B1101HZ3282TRPW')\n    //     .then(res => {\n    //         this.movieData = res.data;\n    //     });\n    // }\n}\n</script>\n\n<style scoped>\n.imgTitle > img{ width:213px; height:303px; }\n</style>"]}]}