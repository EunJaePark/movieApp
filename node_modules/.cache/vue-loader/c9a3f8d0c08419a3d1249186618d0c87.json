{"remainingRequest":"/Users/eunjae/Desktop/github/movieApp/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/eunjae/Desktop/github/movieApp/src/components/InformConts.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/eunjae/Desktop/github/movieApp/src/components/InformConts.vue","mtime":1590742683904},{"path":"/Users/eunjae/Desktop/github/movieApp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eunjae/Desktop/github/movieApp/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/eunjae/Desktop/github/movieApp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eunjae/Desktop/github/movieApp/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmV4cG9ydCBkZWZhdWx0IHsKICBjb21wdXRlZDogewogICAgY2xpY2tNb3ZpZURhdGEoKSB7CiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5jbGlja01vdmllOwogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgdGV4dEVkaXQodGV4dCkgewogICAgICAvLyDqsoDsg4nslrTrpbwg64KY7YOA64K064qUICFIRSwgIUhT6riA7J6QIOyCreygnC4KICAgICAgcmV0dXJuIHRleHQucmVwbGFjZSgvIUhFfCFIUy9nLCAnJyk7CiAgICB9LAogICAgZWRpdFVSTCh1cmwpIHsgICAgICAgICAgICAKICAgICAgICBpZih1cmwgPT09ICcnKSB7ICAgLy8gdXJs7J20IOyXhuydhCDqsr3smrAKICAgICAgICAgICAgLy8gcG9zdGVyIHVybOyjvOyGjOqwgCDsl4bsnYQg6rK97JqwIOu5iCDsnbTrr7jsp4Ag7LaU7LacLgogICAgICAgICAgICByZXR1cm4gJ2h0dHA6Ly9wbGFjZWhvbGQuaXQvMjEzeDMwMyc7CiAgICAgICAgfWVsc2UgaWYodXJsLmluZGV4T2YoJ3wnKSA9PT0gLTEpIHsgICAvLyB1cmzsnbQgMeqwnOydvCDqsr3smrAKICAgICAgICAgICAgcmV0dXJuIHVybDsKICAgICAgICB9ZWxzZSBpZih1cmwuaW5kZXhPZignfCcpKSB7ICAgLy8gdXJs7J20IDLqsJwg7J207IOB7J28IOqyveyasCAgCiAgICAgICAgICAgIC8vIHBvc3RlciB1cmzsnbQg65GQ6rCcIOydtOyDgeydvCDqsr3smrAganBn7J2YIOuniOyngOuniSDquIDsnpDsnbggZ+ydmCBpbmRleOyInOuyiOunjO2BvCDso7zshowg7LaU7LacLgogICAgICAgICAgICAvLyAgfCA8LSDsnbQg6riw7Zi466W8IOq4sOykgOycvOuhnCDtlojrjZTri4ggdXJsIOyjvOyGjOqwgCDtlZjrgpjsnbwg6rK97JqwIOyjvOyGjOqwgCDslYTsmIgg7IKs65287KC4IOuyhOugpOyEnCBqcGfquIDsnpDroZwg7YyQ64uo7ZW07KO864qUIOqyg+ycvOuhnCDsiJjsoJUuCiAgICAgICAgICAgIC8vIHJldHVybiB1cmwuc3Vic3RyaW5nKDAsIHVybC5pbmRleE9mKHVybC5tYXRjaCgvZy9pKSkgKyAxKTsgCiAgICAgICAgICAgIC8vICd8J+uhnCDquLDspIDsnYQg67CU6r+U7KSMLiDrjIDsi6Ag6riw7KG06rO8IOuLrOumrCAz6rCA7KeA7J2YIOqyveyasOuhnCDrtoTrpZjtlaguIAogICAgICAgICAgICByZXR1cm4gdXJsLnN1YnN0cmluZygwLCB1cmwuaW5kZXhPZignfCcpKTsgCiAgICAgICAgfSAKICAgIH0sCiAgfQp9Cg=="},{"version":3,"sources":["InformConts.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"InformConts.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div v-if=\"clickMovieData\">\n      InformConts\n      <!-- <div \n        class=\"movieBox\"\n        v-for=\"movie in movieResult \" v-bind:key=\"movie.DOCID\">\n          <p>제목: {{ textEdit(movie.title) }} ( {{ movie.prodYear }} )</p>\n          <p>감독: {{ textEdit(movie.directors.director[0].directorNm) }}</p>\n          <ul class=\"textData\">\n            <li v-if=\"movie.genre !== ''\">장르: {{ movie.genre }}</li>\n            <li v-if=\"movie.directors.director[0].directorNm !== ''\">감독: {{ textEdit(movie.directors.director[0].directorNm) }}</li>\n            <li v-if=\"movie.actors.actor[0].actorNm !== ''\">배우: \n              <span \n                v-for=\"actorName in movie.actors.actor\" \n                v-bind:key=\"actorName.actorId\">\n                  {{ actorName.actorNm }}, \n              </span> \n            </li>\n            <li v-if=\"movie.plots.plot[0].plotText !== ''\">줄거리: {{ movie.plots.plot[0].plotText }}</li>\n            <li><a v-bind:href=\"movie.kmdbUrl\" target=\"blanket\">상세정보</a></li>\n          </ul>\n      </div>  -->\n      <h2>제목: {{ textEdit(clickMovieData.title) }} ( {{ clickMovieData.prodYear }} )</h2>\n      <br/>\n      <p>영상url: {{ clickMovieData.vods.vod[0].vodUrl }}</p>\n      <video :src=\"clickMovieData.vods.vod[0].vodUrl\"></video>\n      <br/>\n      <p>감독: {{ textEdit(clickMovieData.directors.director[0].directorNm) }}</p>\n      <ul class=\"textData\">\n          <li v-if=\"clickMovieData.genre !== ''\">장르: {{ clickMovieData.genre }}</li>\n          <li v-if=\"clickMovieData.directors.director[0].directorNm !== ''\">감독: {{ textEdit(clickMovieData.directors.director[0].directorNm) }}</li>\n          <li v-if=\"clickMovieData.actors.actor[0].actorNm !== ''\">배우: \n            <span \n              v-for=\"actorName in clickMovieData.actors.actor\" \n              v-bind:key=\"actorName.actorId\">\n                {{ actorName.actorNm }}, \n            </span> \n          </li>\n          <li v-if=\"clickMovieData.plots.plot[0].plotText !== ''\">줄거리: {{ clickMovieData.plots.plot[0].plotText }}</li>\n          <li><a v-bind:href=\"clickMovieData.kmdbUrl\" target=\"blanket\">상세정보</a></li>\n      </ul>\n      <div class=\"stills\">\n        <P>스틸컷url: {{ clickMovieData.stlls }}</P>\n        <img :src=\"editURL(clickMovieData.stlls)\" />\n      </div>\n      <br/>\n      <!-- <div style=\"border:2px solid red;\">클릭한 id 영화 데이터: {{ clickMovieData }}</div> -->\n      \n  </div>\n</template>\n\n<script>\nexport default {\n  computed: {\n    clickMovieData() {\n      return this.$store.state.clickMovie;\n    }\n  },\n  methods: {\n    textEdit(text) {\n      // 검색어를 나타내는 !HE, !HS글자 삭제.\n      return text.replace(/!HE|!HS/g, '');\n    },\n    editURL(url) {            \n        if(url === '') {   // url이 없을 경우\n            // poster url주소가 없을 경우 빈 이미지 추출.\n            return 'http://placehold.it/213x303';\n        }else if(url.indexOf('|') === -1) {   // url이 1개일 경우\n            return url;\n        }else if(url.indexOf('|')) {   // url이 2개 이상일 경우  \n            // poster url이 두개 이상일 경우 jpg의 마지막 글자인 g의 index순번만큼 주소 추출.\n            //  | <- 이 기호를 기준으로 했더니 url 주소가 하나일 경우 주소가 아예 사라져 버려서 jpg글자로 판단해주는 것으로 수정.\n            // return url.substring(0, url.indexOf(url.match(/g/i)) + 1); \n            // '|'로 기준을 바꿔줌. 대신 기존과 달리 3가지의 경우로 분류함. \n            return url.substring(0, url.indexOf('|')); \n        } \n    },\n  }\n}\n</script>\n\n<style>\n\n</style>"]}]}