{"remainingRequest":"/Users/eunjae/Desktop/github/movieApp/node_modules/babel-loader/lib/index.js!/Users/eunjae/Desktop/github/movieApp/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/eunjae/Desktop/github/movieApp/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/eunjae/Desktop/github/movieApp/src/components/MovieConts.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/eunjae/Desktop/github/movieApp/src/components/MovieConts.vue","mtime":1590719810975},{"path":"/Users/eunjae/Desktop/github/movieApp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eunjae/Desktop/github/movieApp/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/eunjae/Desktop/github/movieApp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eunjae/Desktop/github/movieApp/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5kZXgtb2YiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5yZXBsYWNlIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IHsgZXZlbnRidXMgfSBmcm9tICcuLi9tYWluJzsKZXhwb3J0IGRlZmF1bHQgewogIGNvbXB1dGVkOiB7CiAgICBtb3ZpZWRhdGE6IGZ1bmN0aW9uIG1vdmllZGF0YSgpIHsKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLm1vdmllZGF0YTsKICAgIH0sCiAgICBkYXRhSW5Nb3ZpZWRhdGE6IGZ1bmN0aW9uIGRhdGFJbk1vdmllZGF0YSgpIHsKICAgICAgcmV0dXJuIHRoaXMubW92aWVkYXRhLkRhdGE7CiAgICB9LAogICAgbW92aWVSZXN1bHQ6IGZ1bmN0aW9uIG1vdmllUmVzdWx0KCkgewogICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUucmVzdWx0OwogICAgfQogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIC8vIOydtOuypO2KuOuyhOyKpOuhnCBtYWluQ29udHPsl5DshJwg7J6F66Cl7ZWcIOqygOyDieyWtCDrtojrn6zsmLQuCiAgICBjb25zb2xlLmxvZygn7J2067Kk7Yq467KE7IqkIOydtOyaqe2VtOyEnCBtb3ZpZe2OmOydtOyngOyXkOyEnCAkb27snpHrj5ntlbTslbzrkJzri6QuJyk7IC8vIGV2ZW50YnVzLiRvbignc2VuZFNlYXJjaCcsIChzZWFyY2hUeHQsIGNoZWNrKSA9PiB7CiAgICAvLyAgICAgY29uc29sZS5sb2coc2VhcmNoVHh0LCBjaGVjayk7CiAgICAvLyAgICAgdGhpcy5uZXdNb3ZpZShzZWFyY2hUeHQsIGNoZWNrKTsKICAgIC8vIH0pCiAgICAvLyDsnbTrsqTtirjrsoTsiqQg7JWI65CY7IScIGlucHV07Y6Y7J207KeA7JeQ7IScIOuwlOuhnCBzdGF0ZeyXkCDrhKPslrTspIAg6rCSIOqwgOyguOyYtC4KCiAgICBjb25zb2xlLmxvZyh0aGlzLiRzdG9yZS5zdGF0ZS5zZWFyY2hUeHQpOwogICAgY29uc29sZS5sb2codGhpcy4kc3RvcmUuc3RhdGUuc2VhcmNoVHh0LmNoZWNrKTsKICAgIGNvbnNvbGUubG9nKHRoaXMuJHN0b3JlLnN0YXRlLnNlYXJjaFR4dC5zZWFyY2hUeHQpOyAvLyBjb25zdCBjaGVja1R4dCA9IHRoaXMuJHN0b3JlLnN0YXRlLnNlYXJjaFR4dC5jaGVjazsKICAgIC8vIGNvbnN0IGlucHV0VHh0ID0gdGhpcy4kc3RvcmUuc3RhdGUuc2VhcmNoVHh0LnNlYXJjaFR4dDsKCiAgICB2YXIgc2VhcmNoVHh0ID0gdGhpcy4kc3RvcmUuc3RhdGUuc2VhcmNoVHh0OwogICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ0ZFVENIX1RJVExFJywgc2VhcmNoVHh0KTsgLy8gbW92aWVEYXRhKCk7CiAgfSwKICBtZXRob2RzOiB7CiAgICAvLyBwb3N0ZXIgdXJsIO2OuOynkS4odXJs7J20IOuRkOqwnCDsnbTsg4Hsnbwg6rK97JqwIOyyq+uyiOynuCB1cmzrp4wg7LaU7LacKQogICAgcG9zdGVyVVJMOiBmdW5jdGlvbiBwb3N0ZXJVUkwodXJsKSB7CiAgICAgIGlmICh1cmwuaW5kZXhPZignfCcpID09PSAtMSkgewogICAgICAgIC8vIHVybOydtCAx6rCc7J28IOqyveyasAogICAgICAgIHJldHVybiB1cmw7CiAgICAgIH0gZWxzZSBpZiAodXJsLmluZGV4T2YoJ3wnKSkgewogICAgICAgIC8vIHVybOydtCAy6rCcIOydtOyDgeydvCDqsr3smrAgIAogICAgICAgIC8vIHBvc3RlciB1cmzsnbQg65GQ6rCcIOydtOyDgeydvCDqsr3smrAganBn7J2YIOuniOyngOuniSDquIDsnpDsnbggZ+ydmCBpbmRleOyInOuyiOunjO2BvCDso7zshowg7LaU7LacLgogICAgICAgIC8vICB8IDwtIOydtCDquLDtmLjrpbwg6riw7KSA7Jy866GcIO2WiOuNlOuLiCB1cmwg7KO87IaM6rCAIO2VmOuCmOydvCDqsr3smrAg7KO87IaM6rCAIOyVhOyYiCDsgqzrnbzsoLgg67KE66Ck7IScIGpwZ+q4gOyekOuhnCDtjJDri6jtlbTso7zripQg6rKD7Jy866GcIOyImOyglS4KICAgICAgICAvLyByZXR1cm4gdXJsLnN1YnN0cmluZygwLCB1cmwuaW5kZXhPZih1cmwubWF0Y2goL2cvaSkpICsgMSk7IAogICAgICAgIC8vICd8J+uhnCDquLDspIDsnYQg67CU6r+U7KSMLiDrjIDsi6Ag6riw7KG06rO8IOuLrOumrCAz6rCA7KeA7J2YIOqyveyasOuhnCDrtoTrpZjtlaguIAogICAgICAgIHJldHVybiB1cmwuc3Vic3RyaW5nKDAsIHVybC5pbmRleE9mKCd8JykpOwogICAgICB9IGVsc2UgaWYgKHVybC5pbmRleE9mKCdodHRwJykgPT09IC0xKSB7CiAgICAgICAgLy8gdXJs7J20IOyXhuydhCDqsr3smrAKICAgICAgICAvLyBwb3N0ZXIgdXJs7KO87IaM6rCAIOyXhuydhCDqsr3smrAg67mIIOydtOuvuOyngCDstpTstpwuCiAgICAgICAgcmV0dXJuICdodHRwOi8vcGxhY2Vob2xkLml0LzIxM3gzMDMnOwogICAgICB9CiAgICB9LAogICAgLy8gdGl0bGUsIG5hbWUsIGdlbnJlIO2OuOynkS4KICAgIHRleHRFZGl0OiBmdW5jdGlvbiB0ZXh0RWRpdCh0ZXh0KSB7CiAgICAgIC8vIOqygOyDieyWtOulvCDrgpjtg4DrgrTripQgIUhFLCAhSFPquIDsnpAg7IKt7KCcLgogICAgICByZXR1cm4gdGV4dC5yZXBsYWNlKC8hSEV8IUhTL2csICcnKTsKICAgIH0gLy8g7Lac7JewIOuwsOyasOqwgCDrp47snYQg6rK97JqwIDXrqoXquYzsp4Drp4wg7LaU7Lac7ZWY6rOgIOyLtuydjC4KICAgIC8vIGFjdG9yS2V5KGFjdG9yKSB7CiAgICAvLyAgICAgaWYoYWN0b3IpIAogICAgLy8gfSwKICAgIC8vIG1vdmllZGF0YSgpIHsKICAgIC8vICAgICB0aGlzLiRzdG9yZS5zdGF0ZS5yZXN1bHQ7CiAgICAvLyAgICAgLy8g642w7J207YSw66eM65Ok7Ja07IScIOq3uCDsnbTrpoQg7JWI7JeQIOydtCDqsJLsnYQg7KSY67O07J6QLgogICAgLy8gfSwKICAgIC8vIHNwYeuhnCDsoJzsnpHtlZjroKTri4gg7JyE7J2YIGNyZWF0ZWTsl5DshJwg7J2067Kk7Yq467KE7Iqk66GcIOuwm+yVhOyYpOuKlOqyjCDsnpHrj5nsnbQg7JWI65CY7Ja07IScLCDslYTsmIgg7J2067Kk7Yq467KE7Iqk66W8IOyCrOyaqe2VmOyngCDslYrsnYwuCiAgICAvLyDrlLDrnbzshJwsIOyVhOuemOydmCBuZXdNb3ZpZSgp7ZWo7IiYIOyjvOyEneyymOumrCDtlZwg6rKDLgogICAgLy8gbmV3TW92aWUoc2VhcmNoVHh0LCBjaGVjaykgewogICAgLy8gICAgIGNvbnNvbGUubG9nKHNlYXJjaFR4dCwgY2hlY2spOwogICAgLy8gICAgIGNvbnNvbGUubG9nKCfsmIHtmZQg6rKA7IOJ7Ja0IOuwm+yVmOuLpCEhISEnKTsKICAgIC8vICAgICBjb25zdCB0eHRDaGVjayA9IHtzZWFyY2hUeHQsIGNoZWNrfTsKICAgIC8vICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnRkVUQ0hfVElUTEUnLCB0eHRDaGVjaykKICAgIC8vIH0KCiAgfSAvLyBjcmVhdGVkKCkgewogIC8vICAgICBheGlvcwogIC8vICAgICAuZ2V0KCcgaHR0cDovL2FwaS5rb3JlYWZpbG0ub3Iua3Ivb3BlbmFwaS1kYXRhMi93aXNlbnV0L3NlYXJjaF9hcGkvc2VhcmNoX3htbDIuanNwP2NvbGxlY3Rpb249a21kYl9uZXcyJmRldGFpbD1OJmRpcmVjdD0lRUIlQjAlOTUlRUMlQjAlQUMlRUMlOUElQjEmU2VydmljZUtleT1NMU5WMUIxMTAxSFozMjgyVFJQVycpCiAgLy8gICAgIC50aGVuKHJlcyA9PiB7CiAgLy8gICAgICAgICB0aGlzLm1vdmllRGF0YSA9IHJlcy5kYXRhOwogIC8vICAgICB9KTsKICAvLyB9Cgp9Ow=="},{"version":3,"sources":["MovieConts.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDA,SAAA,QAAA,QAAA,SAAA;AAEA,eAAA;AACA,EAAA,QAAA,EAAA;AACA,IAAA,SADA,uBACA;AACA,aAAA,KAAA,MAAA,CAAA,KAAA,CAAA,SAAA;AACA,KAHA;AAIA,IAAA,eAJA,6BAIA;AACA,aAAA,KAAA,SAAA,CAAA,IAAA;AACA,KANA;AAOA,IAAA,WAPA,yBAOA;AACA,aAAA,KAAA,MAAA,CAAA,KAAA,CAAA,MAAA;AACA;AATA,GADA;AAYA,EAAA,OAZA,qBAYA;AACA;AACA,IAAA,OAAA,CAAA,GAAA,CAAA,kCAAA,EAFA,CAIA;AACA;AACA;AACA;AAEA;;AACA,IAAA,OAAA,CAAA,GAAA,CAAA,KAAA,MAAA,CAAA,KAAA,CAAA,SAAA;AACA,IAAA,OAAA,CAAA,GAAA,CAAA,KAAA,MAAA,CAAA,KAAA,CAAA,SAAA,CAAA,KAAA;AACA,IAAA,OAAA,CAAA,GAAA,CAAA,KAAA,MAAA,CAAA,KAAA,CAAA,SAAA,CAAA,SAAA,EAZA,CAaA;AACA;;AAEA,QAAA,SAAA,GAAA,KAAA,MAAA,CAAA,KAAA,CAAA,SAAA;AACA,SAAA,MAAA,CAAA,QAAA,CAAA,aAAA,EAAA,SAAA,EAjBA,CAmBA;AAEA,GAjCA;AAkCA,EAAA,OAAA,EAAA;AACA;AACA,IAAA,SAFA,qBAEA,GAFA,EAEA;AACA,UAAA,GAAA,CAAA,OAAA,CAAA,GAAA,MAAA,CAAA,CAAA,EAAA;AAAA;AACA,eAAA,GAAA;AACA,OAFA,MAEA,IAAA,GAAA,CAAA,OAAA,CAAA,GAAA,CAAA,EAAA;AAAA;AACA;AACA;AACA;AACA;AACA,eAAA,GAAA,CAAA,SAAA,CAAA,CAAA,EAAA,GAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA;AACA,OANA,MAMA,IAAA,GAAA,CAAA,OAAA,CAAA,MAAA,MAAA,CAAA,CAAA,EAAA;AAAA;AACA;AACA,eAAA,6BAAA;AACA;AACA,KAfA;AAgBA;AACA,IAAA,QAjBA,oBAiBA,IAjBA,EAiBA;AACA;AACA,aAAA,IAAA,CAAA,OAAA,CAAA,UAAA,EAAA,EAAA,CAAA;AACA,KApBA,CAqBA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;AAxCA,GAlCA,CA6EA;AACA;AACA;AACA;AACA;AACA;AACA;;AAnFA,CAAA","sourcesContent":["<template>\n  <div class=\"movieConts\">\n      <!-- 검색한 단어 출력 -->\n    <h2>\" {{ moviedata.KMAQuery }} \"</h2>\n\n    <div class=\"dataBox clear\">\n        <div class=\"movies\" v-if=\"dataInMoviedata\">  <!--  v-if는 없어도 될듯. -->\n            <div \n                class=\"movieBox\"\n                v-for=\"movie in movieResult \" v-bind:key=\"movie.DOCID\">\n                <div class=\"imgTitle\">\n                    <img                     \n                        v-bind:src=\"posterURL(movie.posters)\" \n                        v-bind:alt=\"textEdit(movie.title)\"/>\n\n                    <!-- title의 불필요한 글자 삭제해줌. -->\n                    <!-- <p>제목: {{ movie.title.replace(/!HS|!HE/g, '') }}</p> -->\n                    <p>제목: {{ textEdit(movie.title) }} ( {{ movie.prodYear }} )</p>\n                </div>\n\n                <ul class=\"textData\">\n                    <li v-if=\"movie.genre !== ''\">장르: {{ movie.genre }}</li>\n                    <li v-if=\"movie.directors.director[0].directorNm !== ''\">감독: {{ textEdit(movie.directors.director[0].directorNm) }}</li>\n                    <li v-if=\"movie.actors.actor[0].actorNm !== ''\">배우: \n                        <!-- <span \n                            v-for=\"actorName in movie.actors.actor\" \n                            v-bind:key=\"actorName.actorId\">\n                                {{ actorName.actorNm }}, \n                        </span>  -->\n                    </li>\n                    <li v-if=\"movie.plots.plot[0].plotText !== ''\">줄거리: {{ movie.plots.plot[0].plotText }}</li>\n                    <li><a v-bind:href=\"movie.kmdbUrl\" target=\"blanket\">상세정보</a></li>\n                </ul>\n\n\n                    <br/><br/>\n                    - 영화 포스터 주소 전체\n                    {{ movie.posters }} \n                    <br/><br/>\n                    - 영화 포스터 여러개의 주소가 있을 경우 처음 주소만 추출.('g'철자로 자름.)\n                    {{ movie.posters.substring(0, movie.posters.indexOf(movie.posters.match(/g/i)) + 1) }}\n                    <br/><br/>\n                    - 영화 포스터 여러개의 주소가 있을 경우 처음 주소만 추출.('|'기호로 자름.)\n                    {{ posterURL(movie.posters) }}\n                    <br/><br/>\n            </div><!--.movieBox-->\n        </div><!--.movies-->\n    </div><!--.dataBox-->\n    \n    <br/><br/>\n\n    {{ moviedata }}\n  </div><!--.movieConts-->\n</template>\n\n<script>\nimport { eventbus } from '../main';\n\nexport default {\n    computed: {\n        moviedata() {\n            return this.$store.state.moviedata;\n        },\n        dataInMoviedata() {\n            return this.moviedata.Data;\n        },\n        movieResult() {\n            return this.$store.state.result;\n        },\n    },\n    created() {\n        // 이벤트버스로 mainConts에서 입력한 검색어 불러옴.\n        console.log('이벤트버스 이용해서 movie페이지에서 $on작동해야된다.');\n        \n        // eventbus.$on('sendSearch', (searchTxt, check) => {\n        //     console.log(searchTxt, check);\n        //     this.newMovie(searchTxt, check);\n        // })\n\n        // 이벤트버스 안되서 input페이지에서 바로 state에 넣어준 값 가져옴.\n        console.log(this.$store.state.searchTxt);\n        console.log(this.$store.state.searchTxt.check);\n        console.log(this.$store.state.searchTxt.searchTxt);\n        // const checkTxt = this.$store.state.searchTxt.check;\n        // const inputTxt = this.$store.state.searchTxt.searchTxt;\n\n        const searchTxt = this.$store.state.searchTxt;\n        this.$store.dispatch('FETCH_TITLE', searchTxt);\n\n        // movieData();\n\n    },\n    methods: {\n        // poster url 편집.(url이 두개 이상일 경우 첫번째 url만 추출)\n        posterURL(url) {            \n            if(url.indexOf('|') === -1) {   // url이 1개일 경우\n                return url;\n            } else if(url.indexOf('|')) {   // url이 2개 이상일 경우  \n                // poster url이 두개 이상일 경우 jpg의 마지막 글자인 g의 index순번만큼 주소 추출.\n                //  | <- 이 기호를 기준으로 했더니 url 주소가 하나일 경우 주소가 아예 사라져 버려서 jpg글자로 판단해주는 것으로 수정.\n                // return url.substring(0, url.indexOf(url.match(/g/i)) + 1); \n                // '|'로 기준을 바꿔줌. 대신 기존과 달리 3가지의 경우로 분류함. \n                return url.substring(0, url.indexOf('|')); \n            } else if(url.indexOf('http') === -1) {   // url이 없을 경우\n                // poster url주소가 없을 경우 빈 이미지 추출.\n                return 'http://placehold.it/213x303'\n            }\n        },\n        // title, name, genre 편집.\n        textEdit(text) {\n            // 검색어를 나타내는 !HE, !HS글자 삭제.\n            return text.replace(/!HE|!HS/g, '');\n        },\n        // 출연 배우가 많을 경우 5명까지만 추출하고 싶음.\n        // actorKey(actor) {\n        //     if(actor) \n        // },\n\n        // moviedata() {\n        //     this.$store.state.result;\n            \n        //     // 데이터만들어서 그 이름 안에 이 값을 줘보자.\n        // },\n        // spa로 제작하려니 위의 created에서 이벤트버스로 받아오는게 작동이 안되어서, 아예 이벤트버스를 사용하지 않음.\n        // 따라서, 아래의 newMovie()함수 주석처리 한 것.\n\n        // newMovie(searchTxt, check) {\n        //     console.log(searchTxt, check);\n            \n        //     console.log('영화 검색어 받았다!!!!');\n        //     const txtCheck = {searchTxt, check};\n        //     this.$store.dispatch('FETCH_TITLE', txtCheck)\n        // }\n    }\n\n    // created() {\n    //     axios\n    //     .get(' http://api.koreafilm.or.kr/openapi-data2/wisenut/search_api/search_xml2.jsp?collection=kmdb_new2&detail=N&direct=%EB%B0%95%EC%B0%AC%EC%9A%B1&ServiceKey=M1NV1B1101HZ3282TRPW')\n    //     .then(res => {\n    //         this.movieData = res.data;\n    //     });\n    // }\n}\n</script>\n\n<style scoped>\n.imgTitle > img{ width:213px; height:303px; }\n</style>"],"sourceRoot":"src/components"}]}