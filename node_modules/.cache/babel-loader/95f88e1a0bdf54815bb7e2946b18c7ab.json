{"remainingRequest":"/Users/eunjae/Desktop/github/movieApp_ej/node_modules/babel-loader/lib/index.js!/Users/eunjae/Desktop/github/movieApp_ej/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/eunjae/Desktop/github/movieApp_ej/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/eunjae/Desktop/github/movieApp_ej/src/components/common/LikeConts.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/eunjae/Desktop/github/movieApp_ej/src/components/common/LikeConts.vue","mtime":1592540072492},{"path":"/Users/eunjae/Desktop/github/movieApp_ej/node_modules/cache-loader/dist/cjs.js","mtime":1591071293823},{"path":"/Users/eunjae/Desktop/github/movieApp_ej/node_modules/babel-loader/lib/index.js","mtime":1591071293737},{"path":"/Users/eunjae/Desktop/github/movieApp_ej/node_modules/cache-loader/dist/cjs.js","mtime":1591071293823},{"path":"/Users/eunjae/Desktop/github/movieApp_ej/node_modules/vue-loader/lib/index.js","mtime":1591071296053}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdCI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCB7IGdldExpa2VQb2NrZXQgfSBmcm9tICcuLi8uLi91dGlscy9jb29raWVzJzsKZXhwb3J0IGRlZmF1bHQgewogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBsaWtlQ291bnQ6IDAsCiAgICAgIGxpa2VQb2NrZXQ6IFtdLAogICAgICBsaWtlTW92aWVJbmZvcm06IFtdCiAgICB9OwogIH0sCiAgLy8gY29tcHV0ZWQ6IHsKICAvLyAgICAgbGlrZU51bSgpIHsKICAvLyAgICAgICAgIGxldCBnZXRMaWtlUEsgPSBnZXRMaWtlUG9ja2V0KCk7IC8vIOyii+yVhOyalCDtlbTsoJztlZwg7JiB7ZmUIOygleuztCDqsIDsoLjsmLQuCiAgLy8gICAgICAgICBjb25zb2xlLmxvZyhnZXRMaWtlUEspOwogIC8vICAgICAgICAgbGV0IGxpa2VQS2RpdiA9IGdldExpa2VQSy5zcGxpdCgnWycpOwogIC8vICAgICAgICAgY29uc29sZS5sb2cobGlrZVBLZGl2KTsKICAvLyAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsaWtlUEtkaXYubGVuZ3RoOyBpKyspIHsKICAvLyAgICAgICAgICAgICBjb25zb2xlLmxvZyhsaWtlUEtkaXZbaV0pOwogIC8vICAgICAgICAgICAgIGlmKGxpa2VQS2RpdltpXSAhPT0gIicnIikgewogIC8vICAgICAgICAgICAgICAgICBsZXQgZ2V0TGlrZURpdiA9IGxpa2VQS2RpdltpXS5yZXBsYWNlKC9bXHtcfVxdXS9nLCAnJykuc3BsaXQoJyInKVszXS5yZXBsYWNlKC8oXHMqKS9nLCAnJyk7OyAvLyBsaWtlUG9ja2V07JeQIOyeiOuNmCDsmIHtmZTsoJXrs7Qg6rCB6rCBIOu2iOufrOyYtC4KICAvLyAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZ2V0TGlrZURpdik7CiAgLy8gICAgICAgICAgICAgfQogIC8vICAgICAgICAgICAgIHRoaXMubGlrZUNvdW50Kys7CiAgLy8gICAgICAgICB9CiAgLy8gICAgIH0KICAvLyB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICB2YXIgZ2V0TGlrZVBLID0gZ2V0TGlrZVBvY2tldCgpOyAvLyDsoovslYTsmpQg7ZW07KCc7ZWcIOyYge2ZlCDsoJXrs7Qg6rCA7KC47Ji0LgoKICAgIGNvbnNvbGUubG9nKGdldExpa2VQSyk7CiAgICB2YXIgbGlrZVBLZGl2ID0gZ2V0TGlrZVBLLnNwbGl0KCdbJyk7CiAgICBjb25zb2xlLmxvZyhsaWtlUEtkaXYpOwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlrZVBLZGl2Lmxlbmd0aDsgaSsrKSB7CiAgICAgIGNvbnNvbGUubG9nKGxpa2VQS2RpdltpXSk7CgogICAgICBpZiAobGlrZVBLZGl2W2ldICE9PSAiJyciKSB7CiAgICAgICAgdmFyIGdldExpa2VEaXYgPSBsaWtlUEtkaXZbaV0ucmVwbGFjZSgvW1x7XH1cXV0vZywgJycpLnNwbGl0KCciJylbM10ucmVwbGFjZSgvKFxzKikvZywgJycpOwogICAgICAgIDsgLy8gbGlrZVBvY2tldOyXkCDsnojrjZgg7JiB7ZmU7KCV67O0IOqwgeqwgSDrtojrn6zsmLQuCgogICAgICAgIGNvbnNvbGUubG9nKGdldExpa2VEaXYpOwogICAgICAgIHRoaXMubGlrZVBvY2tldC5wdXNoKGdldExpa2VEaXYpOwogICAgICB9CgogICAgICB0aGlzLmxpa2VDb3VudCsrOwogICAgfSAvLyDssJztlZwg7JiB7ZmU66qp66GdIGFwaeyjvOyGjOuhnCDrjbDsnbTthLAg67aI65+s7Jik6riwLgoKCiAgICBjb25zb2xlLmxvZygn7LCc7ZWcIOyYge2ZlCBhcGkg67aI65+s7JmA67O07J6Qfn5+Jyk7CiAgICBjb25zb2xlLmxvZyh0aGlzLmxpa2VQb2NrZXQpOyAvLyDssJztlZwg7JiB7ZmUIOuqqeuhnSDrjbDsnbTthLAg67aI65+s7Jik44WP7JW8IOuQmOuKlOuNsCDtl6Trp6Tqs6Ag7J6I7J2MLi4uCiAgICAvLyBhcGnso7zshozqsIAg67Cw7Je066GcIOuQmOyWtOyeiOuKlOuNsCwg7Ja065a76rKMIO2VmOuCmOyUqSDrs7TrgrTsp4A/Pz8/CgogICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHRoaXMubGlrZVBvY2tldC5sZW5ndGg7IF9pKyspIHsKICAgICAgdmFyIGFwaURhdGEgPSB0aGlzLmxpa2VQb2NrZXRbX2ldOwogICAgICBjb25zb2xlLmxvZyh0aGlzLmxpa2VQb2NrZXRbX2ldKTsKICAgICAgdmFyIHNlYXJjaFR4dEJveCA9IHsKICAgICAgICBzZWFyY2hUeHQ6IGFwaURhdGEgLy8gY2hlY2sgOiB0aGlzLmNoZWNrCgogICAgICB9OwogICAgICBjb25zb2xlLmxvZyhzZWFyY2hUeHRCb3gpOwogICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ1NUQVRFX1VUTCcsIHNlYXJjaFR4dEJveCk7CiAgICAgIHZhciBzZWFyY2hUeHRib3ggPSB0aGlzLiRzdG9yZS5zdGF0ZS5zZWFyY2hUeHRCb3guc2VhcmNoVHh0OwogICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnTElLRV9NT1ZJRV9MSVNUJywgc2VhcmNoVHh0Ym94KTsKICAgICAgY29uc29sZS5sb2coc2VhcmNoVHh0Ym94KTsKICAgICAgY29uc29sZS5sb2codGhpcy4kc3RvcmUuc3RhdGUubGlrZU1vdmllcyk7IC8vIGZvcihsZXQgaiA9IDA7IGogPCB0aGlzLiRzdG9yZS5zdGF0ZS5saWtlTW92aWVzLmxlbmd0aDsgaisrKSB7fQogICAgICAvLyB0aGlzLmxpa2VNb3ZpZUluZm9ybS5wdXNoKHRoaXMuJHN0b3JlLnN0YXRlLmxpa2VNb3ZpZXMpOwogICAgICAvLyBsZXQgdGl0bGUgPSB0aGlzLiRzdG9yZS5zdGF0ZS5saWtlTW92aWVzLmRhdGEuRGF0YVswXS5SZXN1bHRbMF0udGl0bGU7CiAgICAgIC8vIHRoaXMubGlrZU1vdmllVGl0bGUucHVzaCh0aXRsZS5yZXBsYWNlKC8hSEV8IUhTL2csICcnKSk7CiAgICB9CgogICAgY29uc29sZS5sb2codGhpcy4kc3RvcmUuc3RhdGUubGlrZU1vdmllcyk7CiAgICBjb25zb2xlLmxvZyh0aGlzLiRzdG9yZS5zdGF0ZS5saWtlTW92aWVzLmxlbmd0aCk7CiAgICB0aGlzLmxpa2VNb3ZpZUluZm9ybS5wdXNoKHRoaXMuJHN0b3JlLnN0YXRlLmxpa2VNb3ZpZXMpOwogICAgdGhpcy5saWtlTW92aWVMaXN0KHRoaXMuJHN0b3JlLnN0YXRlLmxpa2VNb3ZpZXMpOwogIH0sCiAgbWV0aG9kczogewogICAgbGlrZU1vdmllTGlzdDogZnVuY3Rpb24gbGlrZU1vdmllTGlzdCgpIHsKICAgICAgY29uc29sZS5sb2coJ+yYge2ZlCDrqqnroZ0g67Cw7Je066GcIOyemCDsg53shLHtlbTrs7TsnpAhISEnKTsgLy8gLy8gdGhpcy4KICAgICAgLy8gY29uc29sZS5sb2coJ+ywnO2VnCDsmIHtmZQgYXBpIOu2iOufrOyZgOuztOyekH5+ficpOwogICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmxpa2VQb2NrZXQpOwogICAgICAvLyAvLyDssJztlZwg7JiB7ZmUIOuqqeuhnSDrjbDsnbTthLAg67aI65+s7Jik44WP7JW8IOuQmOuKlOuNsCDtl6Trp6Tqs6Ag7J6I7J2MLi4uCiAgICAgIC8vIC8vIGFwaeyjvOyGjOqwgCDrsLDsl7TroZwg65CY7Ja07J6I64qU642wLCDslrTrlrvqsowg7ZWY64KY7JSpIOuztOuCtOyngD8/Pz8KICAgICAgLy8gZm9yKGxldCBpID0gMDsgaSA8IHRoaXMubGlrZVBvY2tldC5sZW5ndGg7IGkrKykgewogICAgICAvLyAgICAgbGV0IGFwaURhdGEgPSB0aGlzLmxpa2VQb2NrZXRbaV07CiAgICAgIC8vICAgICBjb25zb2xlLmxvZyh0aGlzLmxpa2VQb2NrZXRbaV0pOwogICAgICAvLyAgICAgY29uc3Qgc2VhcmNoVHh0Qm94ID0gewogICAgICAvLyAgICAgICAgIHNlYXJjaFR4dCA6IGFwaURhdGEsIAogICAgICAvLyAgICAgICAgIC8vIGNoZWNrIDogdGhpcy5jaGVjawogICAgICAvLyAgICAgfTsKICAgICAgLy8gICAgIGNvbnNvbGUubG9nKHRoaXMubGlrZVBvY2tldFtpXSk7CiAgICAgIC8vICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ1NUQVRFX1VUTCcsIHNlYXJjaFR4dEJveCk7CiAgICAgIC8vICAgICBsZXQgc2VhcmNoVHh0Ym94ID0gdGhpcy4kc3RvcmUuc3RhdGUuc2VhcmNoVHh0Qm94LnNlYXJjaFR4dFtpXTsKICAgICAgLy8gICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdMSUtFX01PVklFX0xJU1QnLCBzZWFyY2hUeHRib3gpOwogICAgICAvLyAgICAgY29uc29sZS5sb2coc2VhcmNoVHh0Ym94KTsKICAgICAgLy8gICAgIGNvbnNvbGUubG9nKHRoaXMuJHN0b3JlLnN0YXRlLmxpa2VNb3ZpZXMuZGF0YSk7CiAgICAgIC8vICAgICBjb25zb2xlLmxvZyh0aGlzLiRzdG9yZS5zdGF0ZS5saWtlTW92aWVzLmRhdGEuRGF0YVswXS5SZXN1bHRbMF0udGl0bGUpOwogICAgICAvLyAgICAgbGV0IHRpdGxlID0gdGhpcy4kc3RvcmUuc3RhdGUubGlrZU1vdmllcy5kYXRhLkRhdGFbMF0uUmVzdWx0WzBdLnRpdGxlOwogICAgICAvLyAgICAgdGhpcy5saWtlTW92aWVUaXRsZS5wdXNoKHRpdGxlLnJlcGxhY2UoLyFIRXwhSFMvZywgJycpKTsKICAgICAgLy8gfQogICAgfQogIH0KfTs="},{"version":3,"sources":["LikeConts.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAeA,SAAA,aAAA,QAAA,qBAAA;AAEA,eAAA;AACA,EAAA,IADA,kBACA;AACA,WAAA;AACA,MAAA,SAAA,EAAA,CADA;AAEA,MAAA,UAAA,EAAA,EAFA;AAGA,MAAA,eAAA,EAAA;AAHA,KAAA;AAKA,GAPA;AAQA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,EAAA,OA1BA,qBA0BA;AACA,QAAA,SAAA,GAAA,aAAA,EAAA,CADA,CACA;;AACA,IAAA,OAAA,CAAA,GAAA,CAAA,SAAA;AACA,QAAA,SAAA,GAAA,SAAA,CAAA,KAAA,CAAA,GAAA,CAAA;AACA,IAAA,OAAA,CAAA,GAAA,CAAA,SAAA;;AAEA,SAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,SAAA,CAAA,CAAA,CAAA;;AACA,UAAA,SAAA,CAAA,CAAA,CAAA,KAAA,IAAA,EAAA;AACA,YAAA,UAAA,GAAA,SAAA,CAAA,CAAA,CAAA,CAAA,OAAA,CAAA,WAAA,EAAA,EAAA,EAAA,KAAA,CAAA,GAAA,EAAA,CAAA,EAAA,OAAA,CAAA,QAAA,EAAA,EAAA,CAAA;AAAA,SADA,CACA;;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,UAAA;AACA,aAAA,UAAA,CAAA,IAAA,CAAA,UAAA;AACA;;AACA,WAAA,SAAA;AACA,KAdA,CAiBA;;;AACA,IAAA,OAAA,CAAA,GAAA,CAAA,oBAAA;AACA,IAAA,OAAA,CAAA,GAAA,CAAA,KAAA,UAAA,EAnBA,CAsBA;AACA;;AACA,SAAA,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,KAAA,UAAA,CAAA,MAAA,EAAA,EAAA,EAAA,EAAA;AACA,UAAA,OAAA,GAAA,KAAA,UAAA,CAAA,EAAA,CAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,KAAA,UAAA,CAAA,EAAA,CAAA;AAEA,UAAA,YAAA,GAAA;AACA,QAAA,SAAA,EAAA,OADA,CAEA;;AAFA,OAAA;AAIA,MAAA,OAAA,CAAA,GAAA,CAAA,YAAA;AAEA,WAAA,MAAA,CAAA,MAAA,CAAA,WAAA,EAAA,YAAA;AAEA,UAAA,YAAA,GAAA,KAAA,MAAA,CAAA,KAAA,CAAA,YAAA,CAAA,SAAA;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,iBAAA,EAAA,YAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,YAAA;AAGA,MAAA,OAAA,CAAA,GAAA,CAAA,KAAA,MAAA,CAAA,KAAA,CAAA,UAAA,EAjBA,CAoBA;AAEA;AACA;AACA;AACA;;AACA,IAAA,OAAA,CAAA,GAAA,CAAA,KAAA,MAAA,CAAA,KAAA,CAAA,UAAA;AACA,IAAA,OAAA,CAAA,GAAA,CAAA,KAAA,MAAA,CAAA,KAAA,CAAA,UAAA,CAAA,MAAA;AACA,SAAA,eAAA,CAAA,IAAA,CAAA,KAAA,MAAA,CAAA,KAAA,CAAA,UAAA;AACA,SAAA,aAAA,CAAA,KAAA,MAAA,CAAA,KAAA,CAAA,UAAA;AACA,GAhFA;AAiFA,EAAA,OAAA,EAAA;AACA,IAAA,aADA,2BACA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,sBAAA,EADA,CAGA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAIA;AArCA;AAjFA,CAAA","sourcesContent":["<template>\n  <div class=\"likeConts\" >\n      <button @mouseover=\"likeMovieAPI()\">찜한 영화 : {{ likeCount }}개</button>      \n      <!-- {{ likeNum }} -->\n      <div class=\"movieListBox\">\n          찜한 영화 목록 \n          <ul>\n            <li v-for=\"(movie, index) in likeMovieInform\" :key=\"index\">{{ likeMovieInform[0] }}</li>\n\n          </ul>\n      </div>\n  </div>\n</template>\n\n<script>\nimport { getLikePocket } from '../../utils/cookies';\n\nexport default {\n    data() {\n        return {\n            likeCount: 0,\n            likePocket: [],\n            likeMovieInform: [],\n        }\n    },\n    // computed: {\n    //     likeNum() {\n    //         let getLikePK = getLikePocket(); // 좋아요 해제한 영화 정보 가져옴.\n    //         console.log(getLikePK);\n    //         let likePKdiv = getLikePK.split('[');\n    //         console.log(likePKdiv);\n            \n    //         for(let i = 0; i < likePKdiv.length; i++) {\n    //             console.log(likePKdiv[i]);\n    //             if(likePKdiv[i] !== \"''\") {\n    //                 let getLikeDiv = likePKdiv[i].replace(/[\\{\\}\\]]/g, '').split('\"')[3].replace(/(\\s*)/g, '');; // likePocket에 있던 영화정보 각각 불러옴.\n    //                 console.log(getLikeDiv);\n    //             }\n    //             this.likeCount++;\n    //         }\n    //     }\n        \n    // },\n    created() {\n        let getLikePK = getLikePocket(); // 좋아요 해제한 영화 정보 가져옴.\n        console.log(getLikePK);\n        let likePKdiv = getLikePK.split('[');\n        console.log(likePKdiv);\n            \n        for(let i = 0; i < likePKdiv.length; i++) {\n            console.log(likePKdiv[i]);\n            if(likePKdiv[i] !== \"''\") {\n                let getLikeDiv = likePKdiv[i].replace(/[\\{\\}\\]]/g, '').split('\"')[3].replace(/(\\s*)/g, '');; // likePocket에 있던 영화정보 각각 불러옴.\n                console.log(getLikeDiv);\n                this.likePocket.push(getLikeDiv);\n            }\n            this.likeCount++;\n        }\n\n\n        // 찜한 영화목록 api주소로 데이터 불러오기.\n        console.log('찜한 영화 api 불러와보자~~~');\n        console.log(this.likePocket);\n            \n\n            // 찜한 영화 목록 데이터 불러오ㅏ야 되는데 헤매고 있음...\n            // api주소가 배열로 되어있는데, 어떻게 하나씩 보내지????\n            for(let i = 0; i < this.likePocket.length; i++) {\n                let apiData = this.likePocket[i];\n                console.log(this.likePocket[i]);\n                \n                const searchTxtBox = {\n                    searchTxt : apiData, \n                    // check : this.check\n                };\n                console.log(searchTxtBox);\n                \n                this.$store.commit('STATE_UTL', searchTxtBox);\n\n                let searchTxtbox = this.$store.state.searchTxtBox.searchTxt;\n                this.$store.dispatch('LIKE_MOVIE_LIST', searchTxtbox);\n                console.log(searchTxtbox);\n                \n\n                console.log(this.$store.state.likeMovies);\n                \n\n                // for(let j = 0; j < this.$store.state.likeMovies.length; j++) {}\n                \n                // this.likeMovieInform.push(this.$store.state.likeMovies);\n                // let title = this.$store.state.likeMovies.data.Data[0].Result[0].title;\n                // this.likeMovieTitle.push(title.replace(/!HE|!HS/g, ''));\n            }  \n            console.log(this.$store.state.likeMovies);\n            console.log(this.$store.state.likeMovies.length);\n            this.likeMovieInform.push(this.$store.state.likeMovies);\n            this.likeMovieList(this.$store.state.likeMovies);  \n    },\n    methods: {\n        likeMovieList() {\n            console.log('영화 목록 배열로 잘 생성해보자!!!');\n            \n            // // this.\n            // console.log('찜한 영화 api 불러와보자~~~');\n            // console.log(this.likePocket);\n\n            \n\n            // // 찜한 영화 목록 데이터 불러오ㅏ야 되는데 헤매고 있음...\n            // // api주소가 배열로 되어있는데, 어떻게 하나씩 보내지????\n            // for(let i = 0; i < this.likePocket.length; i++) {\n            //     let apiData = this.likePocket[i];\n            //     console.log(this.likePocket[i]);\n                \n            //     const searchTxtBox = {\n            //         searchTxt : apiData, \n            //         // check : this.check\n            //     };\n            //     console.log(this.likePocket[i]);\n            //     this.$store.commit('STATE_UTL', searchTxtBox);\n\n            //     let searchTxtbox = this.$store.state.searchTxtBox.searchTxt[i];\n            //     this.$store.dispatch('LIKE_MOVIE_LIST', searchTxtbox);\n            //     console.log(searchTxtbox);\n                \n\n            //     console.log(this.$store.state.likeMovies.data);\n                \n            //     console.log(this.$store.state.likeMovies.data.Data[0].Result[0].title);\n            //     let title = this.$store.state.likeMovies.data.Data[0].Result[0].title;\n            //     this.likeMovieTitle.push(title.replace(/!HE|!HS/g, ''));\n            // }\n\n            \n            \n        },\n    },\n}\n</script>\n\n<style>\n\n</style>"],"sourceRoot":"src/components/common"}]}