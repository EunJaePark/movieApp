{"remainingRequest":"/Users/eunjae/Desktop/github/movieApp_ej/node_modules/babel-loader/lib/index.js!/Users/eunjae/Desktop/github/movieApp_ej/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/eunjae/Desktop/github/movieApp_ej/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/eunjae/Desktop/github/movieApp_ej/src/components/MovieConts.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/eunjae/Desktop/github/movieApp_ej/src/components/MovieConts.vue","mtime":1591838750520},{"path":"/Users/eunjae/Desktop/github/movieApp_ej/node_modules/cache-loader/dist/cjs.js","mtime":1591071293823},{"path":"/Users/eunjae/Desktop/github/movieApp_ej/node_modules/babel-loader/lib/index.js","mtime":1591071293737},{"path":"/Users/eunjae/Desktop/github/movieApp_ej/node_modules/cache-loader/dist/cjs.js","mtime":1591071293823},{"path":"/Users/eunjae/Desktop/github/movieApp_ej/node_modules/vue-loader/lib/index.js","mtime":1591071296053}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5kZXgtb2YiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5yZXBsYWNlIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNwbGl0IjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IHsgZXZlbnRidXMgfSBmcm9tICcuLi9tYWluJzsKaW1wb3J0IHsgc2F2ZUluZm9ybSwgc2F2ZUZpcnN0S2V5IH0gZnJvbSAnLi4vdXRpbHMvY29va2llcyc7CmV4cG9ydCBkZWZhdWx0IHsKICBjb21wdXRlZDogewogICAgaW5wdXRUZXh0OiBmdW5jdGlvbiBpbnB1dFRleHQoKSB7CiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5zZWFyY2hUeHRCb3guc2VhcmNoVHh0OwogICAgfSwKICAgIG1vdmllZGF0YTogZnVuY3Rpb24gbW92aWVkYXRhKCkgewogICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUubW92aWVkYXRhOwogICAgfSwKICAgIC8vIGRhdGFJbk1vdmllZGF0YSgpIHsKICAgIC8vICAgICByZXR1cm4gdGhpcy5tb3ZpZWRhdGEuRGF0YTsKICAgIC8vIH0sCiAgICBtb3ZpZVJlc3VsdDogZnVuY3Rpb24gbW92aWVSZXN1bHQoKSB7CiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5yZXN1bHQ7CiAgICB9CiAgfSwKICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgLy8g7J2067Kk7Yq467KE7Iqk66GcIG1haW5Db250c+yXkOyEnCDsnoXroKXtlZwg6rKA7IOJ7Ja0IOu2iOufrOyYtC4KICAgIGNvbnNvbGUubG9nKCfsnbTrsqTtirjrsoTsiqQg7J207Jqp7ZW07IScIG1vdmll7Y6Y7J207KeA7JeQ7IScICRvbuyekeuPme2VtOyVvOuQnOuLpC4nKTsgLy8gZXZlbnRidXMuJG9uKCdzZW5kU2VhcmNoJywgKHNlYXJjaFR4dCwgY2hlY2spID0+IHsKICAgIC8vICAgICBjb25zb2xlLmxvZyhzZWFyY2hUeHQsIGNoZWNrKTsKICAgIC8vICAgICB0aGlzLm5ld01vdmllKHNlYXJjaFR4dCwgY2hlY2spOwogICAgLy8gfSkKICAgIC8vIOydtOuypO2KuOuyhOyKpCDslYjrkJjshJwgaW5wdXTtjpjsnbTsp4Dsl5DshJwg67CU66GcIHN0YXRl7JeQIOuEo+yWtOykgCDqsJIg6rCA7KC47Ji0LgoKICAgIGNvbnNvbGUubG9nKHRoaXMuJHN0b3JlLnN0YXRlLnNlYXJjaFR4dEJveCk7CiAgICBjb25zb2xlLmxvZyh0aGlzLiRzdG9yZS5zdGF0ZS5zZWFyY2hUeHRCb3guY2hlY2spOwogICAgY29uc29sZS5sb2codGhpcy4kc3RvcmUuc3RhdGUuc2VhcmNoVHh0Qm94LnNlYXJjaFR4dCk7IC8vIGNvbnN0IGNoZWNrVHh0ID0gdGhpcy4kc3RvcmUuc3RhdGUuc2VhcmNoVHh0LmNoZWNrOwogICAgLy8gY29uc3QgaW5wdXRUeHQgPSB0aGlzLiRzdG9yZS5zdGF0ZS5zZWFyY2hUeHQuc2VhcmNoVHh0OwoKICAgIHZhciBzZWFyY2hUeHRCb3ggPSB0aGlzLiRzdG9yZS5zdGF0ZS5zZWFyY2hUeHRCb3g7CiAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnRkVUQ0hfVElUTEUnLCBzZWFyY2hUeHRCb3gpOyAvLyDssqvrsojsp7gg7YKk7JuM65OcIOu5iOy5uOycvOuhnCDrp4zrk6TslrTspIwuCgogICAgc2F2ZUZpcnN0S2V5KCcnKTsKICB9LAogIG1ldGhvZHM6IHsKICAgIC8vIOyeheugpe2VnCDqsoDsg4nslrQg7LaU7LacLijsmIHtmZR0eXBl64+EIO2VqOq7mCDrk6TslrTsnojslrQg6rKA7IOJ7Ja066eMIOu9keyVhOuDhCkKICAgIGlucHV0VGV4dEVkaXQ6IGZ1bmN0aW9uIGlucHV0VGV4dEVkaXQodGV4dCkgewogICAgICByZXR1cm4gdGV4dC5zdWJzdHJpbmcodGV4dC5pbmRleE9mKCc9JykgKyAxLCB0ZXh0Lmxlbmd0aCk7CiAgICB9LAogICAgLy9tb3ZpZeqygOyDiSDqsrDqs7wg6rCc7IiY6rCAIOy0nSAxMDDqsJwg7J207IOB7J28IOqyveyasCDqsJzsiJjslYjrgrTtkZzsi5zrpbwgMTAw6rmM7KeA66eMIOuCmO2DgOuDhC4KICAgIG1vdmllTnVtOiBmdW5jdGlvbiBtb3ZpZU51bShudW0pIHsKICAgICAgaWYgKG51bSA8PSAxMDApIHJldHVybiBudW07ZWxzZSBpZiAobnVtID4gMTAwKSByZXR1cm4gMTAwOwogICAgfSwKICAgIC8vIHBvc3RlciB1cmwg7Y647KeRLih1cmzsnbQg65GQ6rCcIOydtOyDgeydvCDqsr3smrAg7LKr67KI7Ke4IHVybOunjCDstpTstpwpCiAgICBwb3N0ZXJVUkw6IGZ1bmN0aW9uIHBvc3RlclVSTCh1cmwpIHsKICAgICAgaWYgKHVybCA9PT0gJycpIHsKICAgICAgICAvLyB1cmzsnbQg7JeG7J2EIOqyveyasAogICAgICAgIC8vIHBvc3RlciB1cmzso7zshozqsIAg7JeG7J2EIOqyveyasCDruYgg7J2066+47KeAIOy2lOy2nC4KICAgICAgICByZXR1cm4gJ2h0dHA6Ly9wbGFjZWhvbGQuaXQvMjEzeDMwMyc7CiAgICAgIH0gZWxzZSBpZiAodXJsLmluZGV4T2YoJ3wnKSA9PT0gLTEpIHsKICAgICAgICAvLyB1cmzsnbQgMeqwnOydvCDqsr3smrAKICAgICAgICByZXR1cm4gdXJsOwogICAgICB9IGVsc2UgaWYgKHVybC5pbmRleE9mKCd8JykpIHsKICAgICAgICAvLyB1cmzsnbQgMuqwnCDsnbTsg4Hsnbwg6rK97JqwICAKICAgICAgICAvLyBwb3N0ZXIgdXJs7J20IOuRkOqwnCDsnbTsg4Hsnbwg6rK97JqwIGpwZ+ydmCDrp4jsp4Drp4kg6riA7J6Q7J24IGfsnZggaW5kZXjsiJzrsojrp4ztgbwg7KO87IaMIOy2lOy2nC4KICAgICAgICAvLyAgfCA8LSDsnbQg6riw7Zi466W8IOq4sOykgOycvOuhnCDtlojrjZTri4ggdXJsIOyjvOyGjOqwgCDtlZjrgpjsnbwg6rK97JqwIOyjvOyGjOqwgCDslYTsmIgg7IKs65287KC4IOuyhOugpOyEnCBqcGfquIDsnpDroZwg7YyQ64uo7ZW07KO864qUIOqyg+ycvOuhnCDsiJjsoJUuCiAgICAgICAgLy8gcmV0dXJuIHVybC5zdWJzdHJpbmcoMCwgdXJsLmluZGV4T2YodXJsLm1hdGNoKC9nL2kpKSArIDEpOyAKICAgICAgICAvLyAnfCfroZwg6riw7KSA7J2EIOuwlOq/lOykjC4g64yA7IugIOq4sOyhtOqzvCDri6zrpqwgM+qwgOyngOydmCDqsr3smrDroZwg67aE66WY7ZWoLiAKICAgICAgICByZXR1cm4gdXJsLnN1YnN0cmluZygwLCB1cmwuaW5kZXhPZignfCcpKTsKICAgICAgfQogICAgfSwKICAgIC8vIHRpdGxlLCBuYW1lLCBnZW5yZSDtjrjsp5EuCiAgICB0ZXh0RWRpdDogZnVuY3Rpb24gdGV4dEVkaXQodGV4dCkgewogICAgICAvLyDqsoDsg4nslrTrpbwg64KY7YOA64K064qUICFIRSwgIUhT6riA7J6QIOyCreygnC4KICAgICAgcmV0dXJuIHRleHQucmVwbGFjZSgvIUhFfCFIUy9nLCAnJyk7CiAgICB9LAogICAgLy8g7Lac7JewIOuwsOyasOqwgCDrp47snYQg6rK97JqwIDXrqoXquYzsp4Drp4wg7LaU7Lac7ZWY6rOgIOyLtuydjC4KICAgIC8vIGFjdG9yS2V5KGFjdG9yKSB7CiAgICAvLyAgICAgaWYoYWN0b3IpIAogICAgLy8gfSwKICAgIC8vIOuLpOyLnCDqsoDsg4ntlZjquLAg67KE7Yq8IO2BtOumrSDsi5wgbWFpbu2OmOydtOyngOuhnCDsnbTrj5kuCiAgICBnb01haW46IGZ1bmN0aW9uIGdvTWFpbigpIHsKICAgICAgdGhpcy4kcm91dGVyLnB1c2goJy9tYWluJyk7CiAgICB9LAogICAgLy8ga2V5d29yZO2VmOuCmOyUqSDrhKPslrTspIwuICsgZGF0YeydmCBrZXl3b3JkRmlyc3Tsl5Ag7LKrIOuyiOynuCDtgqTsm4zrk5wg64Sj7Ja07KSMLgogICAga2V5V29yZDogZnVuY3Rpb24ga2V5V29yZChrZXkpIHsKICAgICAgY29uc29sZS5sb2coa2V5KTsKICAgICAgaWYgKGtleSA9PT0gJycpIHJldHVybjtlbHNlIGlmIChrZXkuaW5kZXhPZignLCcpID09PSAtMSkgewogICAgICAgIC8vIHRoaXMua2V5d29yZEZpcnN0ID0ga2V5OwogICAgICAgIHJldHVybiBrZXk7CiAgICAgIH0gZWxzZSBpZiAoa2V5LmluZGV4T2YoJywnKSkgewogICAgICAgIC8vIHRoaXMua2V5d29yZEZpcnN0ID0ga2V5LnNwbGl0KCcsJylbMF07CiAgICAgICAgcmV0dXJuIGtleS5zcGxpdCgnLCcpWzBdOwogICAgICB9CiAgICB9LAogICAgLy8gcG9zdGVy7YG066atIOyLnCDshLjrtoAg7KCV67O0IO2OmOydtOyngChJbmZvcm1QYWdlKeuhnCDsnbTrj5kuKO2VtOuLuSDsmIHtmZTsnZgg642w7J207YSw65Ok64+EIOuEmOqyqOykjC4pCiAgICBtb3ZlSW5mb3JtOiBmdW5jdGlvbiBtb3ZlSW5mb3JtKGtleXdvcmQsIG1vdmllSUQsIGRpcmVjdG9yLCBtb3ZpZVNlcSkgewogICAgICAvLyBJbmZvcm1Db250c+qwgCDsg4jroZzqs6DsuajtlbTrj4Qg6re464yA66GcIOuCtOyaqeydtCDrgqjslYTsnojrj4TroZ0g7ZWY6riwIOychO2VtOyEnCwg7LKY7J2M67aA7YSwIHRpdGxlLCBkaXJlY3RvciwgbW92aWVTZXHrpbwgY29va2ll7JmAIHN0b3Jl7JeQIOuEmOqyqOykmOyEnCBhcGnsg53shLHtlaAg7IiYIOyeiOuPhOuhnSDtlZwg6rKD7J2064ukLgogICAgICAvLyB0aXRsZSwgZGlyZWN0b3IsIG1vdmllU2Vx66W8IO2VmOuCmOyUqeunjCDtlbTrtKTrjZTri4gg64uk66W4IOyYge2ZlOqwgCDsl7DqsrDrkJjripQg6rK97Jqw6rCAIOyeiOyWtOyEnCDsobDqsbTsnYQgM+qwnOuCmCDspIAg6rKDLgogICAgICBzYXZlSW5mb3JtKCJ0aXRsZT0iLmNvbmNhdChtb3ZpZUlELCAiJmRpcmVjdG9yPSIpLmNvbmNhdChkaXJlY3RvciwgIiZtb3ZpZVNlcT0iKS5jb25jYXQobW92aWVTZXEpKTsKICAgICAgY29uc29sZS5sb2codGhpcy4kc3RvcmUuc3RhdGUubW92aWVJRCk7CiAgICAgIHZhciBzZWFyY2hUeHRCb3ggPSB7CiAgICAgICAgLy8gc2VhcmNoVHh0IDogYG1vdmllSWQ9JHttb3ZpZUlEfWAsIAogICAgICAgIHNlYXJjaFR4dDogInRpdGxlPSIuY29uY2F0KG1vdmllSUQsICImZGlyZWN0b3I9IikuY29uY2F0KGRpcmVjdG9yLCAiJm1vdmllU2VxPSIpLmNvbmNhdChtb3ZpZVNlcSkKICAgICAgfTsKICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCdNT1ZJRV9JRCcsIHNlYXJjaFR4dEJveCk7IC8vY29va2ll7JeQIOyyqyDrsojsp7gga2V57KCV67O0IOyggOyepS4KCiAgICAgIHNhdmVGaXJzdEtleSgia2V5d29yZD0iLmNvbmNhdChrZXl3b3JkKSk7CiAgICAgIHZhciBrZXl3b3JkRmlyc3RCb3ggPSB7CiAgICAgICAgc2VhcmNoVHh0OiAia2V5d29yZD0iLmNvbmNhdChrZXl3b3JkKSwKICAgICAgICBjaGVjazogJ2tleXdvcmQnCiAgICAgIH07IC8vIOyyqyDrsojsqLAga2V57KCV67O0IOydtOyaqe2VtOyEnCBhcGnqtaztlaguKOq4sOyhtOydmCBhcGnqtaztlZjripQg7L2U65Oc7JeQIOuEo+uKlCDsnbjsnpAg7ZiV7Iud6rO8IOqwmeqyjO2VmOq4sCDsnITtlbQgJ2tleXdvcmRGaXJzdEJveCfsho3sl5Agc2VhcmNoVHh066W8IOuEo+uKlCDrsKnsi53snLzroZwg7KCc7J6R7ZWcIOqyg+yehC4pCgogICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ1NJTUlMQVJfTU9WSUVfQVBJJywga2V5d29yZEZpcnN0Qm94KTsgLy8gdGhpcy4kc3RvcmUuY29tbWl0KCdDTElDS19NT1ZJRScsIG1vdmllKTsgCgogICAgICB0aGlzLiRyb3V0ZXIucHVzaCgnL2luZm9ybScpOwogICAgfQogIH0KfTs="},{"version":3,"sources":["MovieConts.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"movieConts\">\n    <button class=\"gomainBtn\" @click.prevent=\"goMain\">\n        <span class=\"arrow\">← </span> \n        <span class=\"text\"> 검색 페이지로</span>\n    </button>\n\n    <!-- 검색한 단어 출력 -->\n    <h2>{{ inputTextEdit(inputText) }}</h2>\n\n    <div class=\"movieNumBox\">\n        <p>총 {{ movieNum(moviedata.TotalCount) }}개의 영화가 검색되었습니다.</p>\n        <p>( 오른쪽으로 스크롤 하면 순서대로 모든 영화 목록을 볼 수 있습니다. )</p>\n    </div>\n\n    <div class=\"dataBox clear\">\n        <div class=\"movies clear\" v-if=\"movieResult\"> \n            <!-- v-if를 줘서 영화 데이터가 존재할 때만 영화 정보 박스(.movies)를 보이게 함. + movieResult속에 있는 데이터들 사용하려면 적어줘야함.(왜그런지는 모르겠다..) -->\n            <div \n                class=\"movieBox\"\n                v-for=\"(movie, index) in movieResult \" \n                v-bind:key=\"index\"\n            >\n                <div class=\"imgTitle\" @click=\"moveInform(keyWord(movie.keywords), textEdit(movie.title), textEdit(movie.directors.director[0].directorNm), movie.movieSeq)\">\n                    <img                     \n                        v-bind:src=\"posterURL(movie.posters)\" \n                        v-bind:alt=\"textEdit(movie.title)\"\n                    />\n\n                    <div class=\"hoverBox\">\n                        <!-- <p class=\"title\">{{ textEdit(movie.title) }}<br/>( {{ movie.prodYear }} )</p> -->\n                        <p class=\"director\">감독: {{ textEdit(movie.directors.director[0].directorNm) }}</p>\n                        <p class=\"story\" v-if=\"movie.plots.plot[0].plotText !== ''\">줄거리: {{ movie.plots.plot[0].plotText }}</p>\n                    </div>\n                </div>\n\n                <p class=\"title\">\n                    <span>{{ textEdit(movie.title) }}</span>\n                    <span class=\"year\">( {{ movie.prodYear }} )</span>\n                </p>\n            </div><!--.movieBox-->\n        </div><!--.movies-->\n\n        <p class=\"nodataTxt\" v-else>해당하는 영화가 없습니다.</p>\n    </div><!--.dataBox-->\n    \n    <br/><br/>\n    <!-- {{ moviedata }} -->\n  </div><!--.movieConts-->\n</template>\n\n<script>\nimport { eventbus } from '../main';\nimport { saveInform, saveFirstKey } from '../utils/cookies';\n\nexport default {\n    computed: {\n        inputText() {\n            return this.$store.state.searchTxtBox.searchTxt;\n        },\n        moviedata() {\n            return this.$store.state.moviedata;\n        },\n        // dataInMoviedata() {\n        //     return this.moviedata.Data;\n        // },\n        movieResult() {\n            return this.$store.state.result;\n        },\n    },\n    created() {\n        // 이벤트버스로 mainConts에서 입력한 검색어 불러옴.\n        console.log('이벤트버스 이용해서 movie페이지에서 $on작동해야된다.');\n        \n        // eventbus.$on('sendSearch', (searchTxt, check) => {\n        //     console.log(searchTxt, check);\n        //     this.newMovie(searchTxt, check);\n        // })\n\n        // 이벤트버스 안되서 input페이지에서 바로 state에 넣어준 값 가져옴.\n        console.log(this.$store.state.searchTxtBox);\n        console.log(this.$store.state.searchTxtBox.check);\n        console.log(this.$store.state.searchTxtBox.searchTxt);\n        // const checkTxt = this.$store.state.searchTxt.check;\n        // const inputTxt = this.$store.state.searchTxt.searchTxt;\n\n        const searchTxtBox = this.$store.state.searchTxtBox;\n        this.$store.dispatch('FETCH_TITLE', searchTxtBox);\n\n \n        // 첫번째 키워드 빈칸으로 만들어줌.\n        saveFirstKey('');\n\n    },\n    methods: {\n        // 입력한 검색어 추출.(영화type도 함께 들어있어 검색어만 뽑아냄)\n        inputTextEdit(text) {\n            return text.substring(text.indexOf('=')+1, text.length);\n        },\n        //movie검색 결과 개수가 총 100개 이상일 경우 개수안내표시를 100까지만 나타냄.\n        movieNum(num) {\n            if(num <= 100) return num;\n            else if(num > 100) return 100;\n        },\n        // poster url 편집.(url이 두개 이상일 경우 첫번째 url만 추출)\n        posterURL(url) {            \n            if(url === '') {   // url이 없을 경우\n                // poster url주소가 없을 경우 빈 이미지 추출.\n                return 'http://placehold.it/213x303';\n            }else if(url.indexOf('|') === -1) {   // url이 1개일 경우\n                return url;\n            }else if(url.indexOf('|')) {   // url이 2개 이상일 경우  \n                // poster url이 두개 이상일 경우 jpg의 마지막 글자인 g의 index순번만큼 주소 추출.\n                //  | <- 이 기호를 기준으로 했더니 url 주소가 하나일 경우 주소가 아예 사라져 버려서 jpg글자로 판단해주는 것으로 수정.\n                // return url.substring(0, url.indexOf(url.match(/g/i)) + 1); \n                // '|'로 기준을 바꿔줌. 대신 기존과 달리 3가지의 경우로 분류함. \n                return url.substring(0, url.indexOf('|')); \n            } \n        },\n        // title, name, genre 편집.\n        textEdit(text) {\n            // 검색어를 나타내는 !HE, !HS글자 삭제.\n            return text.replace(/!HE|!HS/g, '');\n        },\n        // 출연 배우가 많을 경우 5명까지만 추출하고 싶음.\n        // actorKey(actor) {\n        //     if(actor) \n        // },\n\n        // 다시 검색하기 버튼 클릭 시 main페이지로 이동.\n        goMain() {\n            this.$router.push('/main');\n        },\n        // keyword하나씩 넣어줌. + data의 keywordFirst에 첫 번째 키워드 넣어줌.\n        keyWord(key) {\n            console.log(key);\n            \n            if(key === '') return;\n            else if(key.indexOf(',') === -1) {\n                // this.keywordFirst = key;\n                return key;\n            }\n            else if(key.indexOf(',')) {\n                // this.keywordFirst = key.split(',')[0];\n                return key.split(',')[0];\n            }\n        },\n        // poster클릭 시 세부 정보 페이지(InformPage)로 이동.(해당 영화의 데이터들도 넘겨줌.)\n        moveInform(keyword, movieID, director, movieSeq) {\n            // InformConts가 새로고침해도 그대로 내용이 남아있도록 하기 위해서, 처음부터 title, director, movieSeq를 cookie와 store에 넘겨줘서 api생성할 수 있도록 한 것이다.\n            // title, director, movieSeq를 하나씩만 해봤더니 다른 영화가 연결되는 경우가 있어서 조건을 3개나 준 것.\n            saveInform(`title=${movieID}&director=${director}&movieSeq=${movieSeq}`);\n            console.log(this.$store.state.movieID);\n\n            const searchTxtBox = {\n                // searchTxt : `movieId=${movieID}`, \n                searchTxt : `title=${movieID}&director=${director}&movieSeq=${movieSeq}`, \n            };\n            this.$store.commit('MOVIE_ID', searchTxtBox);\n\n            //cookie에 첫 번째 key정보 저장.\n            saveFirstKey(`keyword=${keyword}`);\n            const keywordFirstBox = {\n                searchTxt : `keyword=${keyword}`, \n                check : 'keyword',\n            }; \n            \n            // 첫 번쨰 key정보 이용해서 api구함.(기존의 api구하는 코드에 넣는 인자 형식과 같게하기 위해 'keywordFirstBox'속에 searchTxt를 넣는 방식으로 제작한 것임.)\n            this.$store.commit('SIMILAR_MOVIE_API', keywordFirstBox);\n            \n            // this.$store.commit('CLICK_MOVIE', movie); \n            this.$router.push('/inform');\n        }\n\n    }\n\n}\n</script>\n\n<style scoped>\n\n</style>"],"sourceRoot":"src/components"}]}